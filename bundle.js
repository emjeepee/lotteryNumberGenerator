/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "named": () => (/* binding */ named),
/* harmony export */   "sortArrOfNumbs": () => (/* binding */ sortArrOfNumbs)
/* harmony export */ });
/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ "./src/styles.css");
 // Somevars

var mainNumbersButt = document.querySelector('#mainNumbersButt');
var mainClearNumbersButt = document.querySelector('#mainClearNumbersButt');
var luckyStarsButt = document.querySelector('#luckyStarsButt');
var luckyStarsClearButt = document.querySelector('#luckyStarsClearButt');
var mainNumb1 = document.querySelector('#mainNumb1');
var mainNumb2 = document.querySelector('#mainNumb2');
var mainNumb3 = document.querySelector('#mainNumb3');
var mainNumb4 = document.querySelector('#mainNumb4');
var mainNumb5 = document.querySelector('#mainNumb5');
var luckyNumb1 = document.querySelector('#luckyNumb1');
var luckyNumb2 = document.querySelector('#luckyNumb2'); // Some fns
// An fn to generate a random number 
// between two limits, inclusive of 
// limOne and limTwo (so this fn generates
// a random number from 23-57 when 
// limOne = 23 and limTwo = 57)

var generateNum = function generateNum(limOne, limTwo) {
  var z;
  var flag = true;

  do {
    // Remmber that Math.floor(Math.random() * 10) generates 0 to 9
    // So Math.floor(Math.random() * X) generates 0 to (X-1)
    z = Math.floor(Math.random() * limTwo) + 1; // generates 1 to X

    if (z < limOne) {
      flag = false;
    } else {
      flag = true;
    } // end if

  } while (!flag); // ie do again if flag false


  return z;
}; // end generateNum
//--
// An fn to make numb unique numbers between
// limLow and limHigh (inclusive). This fn
// returns and unsorted array. This fn first 
// checks to make sure that 
// numb < limHigh-limLow (as you can't ask for,
// say, six unique numbers if there are only 
// five possible):


var makeNumbNumbs = function makeNumbNumbs(limLow, limHigh, numb) {
  if (limHigh - limLow + 1 < numb) {
    console.log("Third argument is too small.");
  } else {
    var myArr = [];
    var rand;

    for (var i = 0; i < numb; i++) {
      do {
        rand = generateNum(limLow, limHigh);
      } while (myArr.includes(rand));

      myArr.push(rand);
    }

    return myArr;
  }
}; // fn to sort an array of numbers in order:


var sortArrOfNumbs = function sortArrOfNumbs(arr) {
  var arrToReturn = [];
  arrToReturn = arr.sort(function (a, b) {
    return a - b;
  });
  return arrToReturn;
}; // end fn sortArrOfNumbs

var named = 'What is the meaning of life?'; // Event listeners
// Event listener for the click ofthe button that generates 
// the main 6 numbers:

mainNumbersButt.addEventListener('click', function () {
  var sortedArr = [];
  var unsortedArr = [];
  unsortedArr = makeNumbNumbs(1, 50, 5);
  sortedArr = sortArrOfNumbs(unsortedArr);
  mainNumb1.innerHTML = sortedArr[0];
  mainNumb2.innerHTML = sortedArr[1];
  mainNumb3.innerHTML = sortedArr[2];
  mainNumb4.innerHTML = sortedArr[3];
  mainNumb5.innerHTML = sortedArr[4];
}); // Anevent listener for the main clear butt:

mainClearNumbersButt.addEventListener('click', function () {
  mainNumb1.innerHTML = "";
  mainNumb2.innerHTML = "";
  mainNumb3.innerHTML = "";
  mainNumb4.innerHTML = "";
  mainNumb5.innerHTML = "";
}); // Event listener for the click ofthe button that generates 
// the 2 lucky stars numbers:

luckyStarsButt.addEventListener('click', function () {
  var sortedArr = [];
  var unsortedArr = [];
  unsortedArr = makeNumbNumbs(1, 12, 2);
  sortedArr = sortArrOfNumbs(unsortedArr);
  luckyNumb1.innerHTML = sortedArr[0];
  luckyNumb2.innerHTML = sortedArr[1];
}); // An event listener for the main clear butt:

luckyStarsClearButt.addEventListener('click', function () {
  luckyNumb1.innerHTML = "";
  luckyNumb2.innerHTML = "";
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*Fonts*/\n/*For the large buttons*/\n@font-face {\n    font-family: 'Open Sans-Condensed-ExtraBold'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Bold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format('truetype');\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Italic';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format('truetype');\n           }\n\n/*For the title of under-heading TDs*/\n@font-face {\n    font-family: 'Open Sans-SemiBold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format('truetype');\n           }\n\n/* Originally for the bottomView PF title*/\n/* DONT USE!!!! Using this font for the text in \na <p> in a <div> that code makes dynamically \nproduces an eroneous value for \ntheDiv.offsetWidth !!!!!!! (NOTE it seems to produce \nthe correct value when the div is hard-coded \nin html!!)*/\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format('truetype');\n           }\n\n/* For the Select div's <p>\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n           */\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*An alert box*/\n.alertBoxOne{ \nvisibility: visible;\n\nz-index: 10;\nbackground-color: #caa3f0;\nposition: absolute;\ntop: 200px;\nleft: 100px;\n\nwidth: 400px;\nheight: 300px;\n\nborder: #0f31f2 10px solid;\nborder-radius: 10px;\n\n        }\n\n/*An alert box*/\n.alertBoxText{ \nfont-family: 'Courier New', Courier, monospace;\nfont-size: 36px;\ncolor: #dd1c1c;\n\n\n}\n\n\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n\n\n\n/*The all-enclosing div*/\n.enclDivClass{\nposition: relative;\n\nwidth: 1000px;\nheight: 1000px;\n\nmargin: 20px auto;\n\nborder: 2px solid black;\nborder-radius: 8px;\nbackground-color: rgb(182, 176, 176);\n             }\n\n\n/*For the divs that contain \nall of the stuff concerning either main numbers or luck stars numbers*/\n.contDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n       height: 400px; \n       width: 95%;\n        left: 17px;\n        top: 20px;\n    \n    border-radius: 3px;\n    \n    border: #570d82 5px outset;\n        }\n\n.positionContDivMain{\n position: absolute;\n top: 20px;\n left: 20px;\n                    }\n\n.positionContDivLucky{\n    position: absolute;\n    top: 450px;\n    left: 20px;\n                     }\n\n\n\n\n\n/*For the div that contains a\nheadline (ie \"Click below to ...\")*/\n.headlineEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n       height: 100px; \n       width: 95%px;\n        left: 17px;\n        top: 20px;\n    \n    border-radius: 3px;\n    \n    border: #a44cd6 5px outset;\n                }\n\n.positionHead{\n        position: absolute;\n        left: 17px;\n        top: 20px;\n                      }\n\n.headlineText{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 56px;\n             }\n\n/* The container div for the divs that contains the\nnumbers*/\n\n.numbersCont{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    position: absolute;\n    width: 95%;\n    height: 150px;    \n    left: 17px;\n        top: 200px;\n\n        border: #0f31f2 2px dotted;\n    }\n\n\n/* The container div for the number itself */\n\n.numberBox {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\nwidth: 120px;\nheight: 90%;\nborder: #531010 3px solid;\nborder-radius: 10px;\nbackground-color: #e0c6c6;\n\npadding: 0px;\nmargin: 20px;\n\n           }\n\n\n/*For the <p> in a number box*/\n.numberBoxText {\n    font-family: 'Open Sans-Bold';\n    font-size: 80px;\n    line-height: 80px;\nbackground-color: #e0c6c6;\n\npadding: 0px;\nmargin: 0px;\n\n           }\n\n\n\n\n\n\n\n.battleshipsText {\n    font-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 108px;\npadding: 0px;\nmargin: 0px;\n                 }\n\n\n\n/* The enclosing div for the\ntext that reads \"Home waters\"\nand \"Enemy waters\" */\n.watersTextEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    top: 195px;\n    left: 217px;\n    \n    width: 1199px;\n        \n    height: 100px;\n    \n    background-color: rgb(160, 218, 234);\n    border-radius: 6px;\n    border: rgb(23, 136, 235) 3px solid;\n    \n                       }\n\n  /* The <p> for the text in waters div */\n  .watersText {\n    font-family: 'Open Sans-Italic';\n    font-size: 56px;\n    \n    margin: 0px;\n    padding: 0px;\n              } \n\n\n\n  /* The <div> that encloses the \n  area where user selects his/her ships*/\n  .shipsEnclosingDiv{\nposition: absolute;\nleft: 17px;\ntop: 195px;\n\nwidth: 190px;\nheight: 640px;\n\nborder:rgb(34, 132, 212) 2px ridge;\n\n\n                    }\n\n/* The <div> that encloses the \ndiv that contains the <p> for text\n \"Place your vessels\"*/\n.placementEnclDiv{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    \n    width: 180px;\n    height: 97px;\n    \n    border:rgb(34, 132, 212) 2px ridge;\n\n    margin: 0px;\n    padding: 0px;    \n \n    }\n\n/* The <p> for text \"Place your vessels\"*/\n.shipsP{\n    font-family: 'Open Sans-Bold';\n    font-size: 30px;\n\n    margin: 0px;\n    padding: 0px;    \n\n    opacity: 1;\n       }\n\n/* The div containing the actual vessels*/\n.vesselsContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n\n    position: absolute;\n    left: 3px;\n    top: 106px;\n    \n    width: 180px;\n    height: 420px;\n    \n    border:rgb(34, 132, 212) 2px ridge;\n\n                }\n\n/* The vessels themselves.\nThis is for a div that contains a\n<p> for, eg, \"Place your battleship\"*/\n.vessels{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n    position: relative;\n    \n    width: 170px;\n    height: 50px;\n    \n    border:rgb(76, 104, 127) 2px dotted;\n        }\n\n\n/* The div containing \ni)   the <p> for text \"destroyer\" (eg)\nii)  the div containing the RBs and \n     the smallButton\n*/\n.vesselsTextDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 90px;\n    width: 160px;\n    border:rgb(26, 211, 19) 2px dotted;        \n   \n               }\n\n\n/* The div containing \nthe RBs and the smallButton\n*/\n.buttsCont{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 40%;\n    width: 100%;\n    border:rgb(211, 102, 19) 2px dotted;        \n    \n               }\n\n/* The radio buttons*/\n .rButt {\nwidth: 30px;\nheight: 30px;\nborder: 5px solid rgb(110, 8, 138);\n\nopacity: 0.2;\n        }\n\n/*The radio button label */\n.rbLabel{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n\n    opacity: 0.2;\n        }\n\n\n\n.rButt label {\n        /*display: inline-block;*/\n        position: relative;\n        left: -55px;\n        background-color: #520560;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 18px;\n        cursor: pointer;\n\n      }      \n.rButt:checked+label {\n        background-color: #d2aed8;\n        padding: 10px;\n      }\n\n/* The labelsfor the \nradio buttons*/\n/*\n.rbLabel {\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    position: relative;\n    left: -5px;\n    color: #3a1053;\n         }\n*/\n\n\n/* The small buttons the user employs\n   to place his/her vessels*/\n.smallButton{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    width: 35px;\n    height: 25px;\n    \n    border: bisque 1px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(134, 71, 200);\n    \n    box-shadow: black 3px 3px 3px;\n    \n    margin-right: 0px;\n\n    opacity: 1;\n    \n                }\n    \n    .smallButton:hover{ \n        background-color: rgb(99, 114, 109);\n                      }  \n    \n    \n    .smallButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                       } \n    \n\n\n\n\n\n\n\n\n/* The <p> for the text, eg \n\"Place your carrier*/\n.vesselsText{\n    font-family: 'Open Sans-SemiBold';\n    font-size: 16px;\n    width: 160px;\n   margin: 0px;\n   padding: 0px;\n\n   opacity: 0.2;\n            }\n\n\n/* NOT BEING USED*/            \n/* For the img of the ship*/\n.shipImage{\n    width: 160px;\n    height: 180px;\n    border:rgb(190, 55, 14) 2px dashed;\n         }\n/* NOT BEING USED*/            \n\n\n  /* The <div> that encloses the homewaters \n  and enemy waters grid divs*/\n.seasEnclosingDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    opacity: 1;\n\n\n    position: relative;\n    top: 195px;\n    left: 217px;\n    \n    width: 1199px;\n    height: 590px;\n       border: 1px dotted rgb(193, 32, 179) \n                 }\n\n  /* The <div> for the home waters.\n  This is a container grid  */\n.homeWatersDiv{\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 550px;\nwidth: 550px;\n\n    border: 1px solid rgb(68, 68, 176);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\nbackground-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* Resize the background image to cover the entire container */\n\n}\n\n  /* The <div> for the enemy waters.\n  This is a container grid. It contains the 100\n  white squares  */\n  .enemyWatersDiv{\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 550px;\nwidth: 550px;\n\n    border: 1px solid rgb(68, 68, 176);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\nbackground-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* Resize the background image to cover the entire container */\n\n}\n\n\n/* For the 100 divs of the home waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.homeGridSquare{\nheight: 48px;\nwidth: 48px;\n\nborder-style: groove;\n    border-width: 2px;\n    border-color: #000000;\n    border-radius: 2px;\nbackground-color: #ffffff;\n            }\n\n/* For the 100 divs of the enemy waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.enemyGridSquare{\n    height: 48px;\n    width: 48px;\n    \n    border-style: groove;\n        border-width: 2px;\n        border-color: #000000;\n        border-radius: 2px;\n    background-color: #ffffff;\n                }\n    \n\n\n\n\n\n\n\n\n\n\n/* ------------------------ */\n\n\n/* the class for an opaque button that \nhas hover and depress effects. This div \nis a child of div of class headlineEnclDiv*/\n.largeButton1{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: 200px;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(250, 238, 214);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton1:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n/*For the <p> of the text \n\"start\" / \"restart\" */\n.largeButton1Text{\n    font-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 28px;\ncolor: #6f19c4;\n                 }\n\n.mainButtPos{\n    position: absolute;\n    left: 25px;\n    top: 150px;\n}\n\n.mainClearButtPos{\n    position: absolute;\n    left: 550px;\n    top: 150px;\n}\n\n.luckyButtPos{\n    position: absolute;\n    left: 25px;\n    top: 150px;\n}\n\n.luckyClearButtPos{\n    position: absolute;\n    left: 550px;\n    top: 150px;\n}\n\n\n\n\n\n\n/* ------------------------ */\n\n/* Large buttons */\n/* the class for a faded button that \nhas no hover or depress effect */\n.largeButton{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \nwidth: fit-content;\nheight: 30px;\n\nborder: bisque 1px solid ;\nborder-radius: 5px 5px 5px 5px ;\n\nbackground-color: rgb(235, 198, 181);\nbox-shadow: black 3px 3px 3px;\n\nopacity: 0.3;\n\npointer-events: none;\n            }\n\n/* ------------------------ */\n\n\n\n\n\n\n\n\n\n\n.warnBoxDiv{\nposition: absolute;\n/*code sets top and left values*/\n\nz-index: 25;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between; \n    align-items: center;\n    \n    width: 400px;\n    height: 200px;\n\n    border: rgb(107, 88, 65) 4px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(231, 64, 22);\n    \n    box-shadow: black 16px 16px 20px;\n        }\n\n/* For the <p> of the warning box\nthat contains the text \"You are \nabout to … */\n.warnBoxText{\nposition: relative;        \n\nfont-size: 28px;\nfont-family: 'Open Sans-Italic';\n\ncolor: rgb(238, 226, 226);\n\n            }\n     \n/*For the div that contains the <p>\nthat is the text ofthe warning box*/\n.warnBoxPcontainDiv{\nposition: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\nwidth: 94%;\nheight: 150px;\n/*development\nborder: blue 1px dotted;*/\n\npadding:0px;\n\n                   }\n\n/* For the div that contains the \nCancel and OK buttons of the \nwarning box */\n.warnBoxButtonsContainDiv{\n    position: relative;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content:space-between; \n    align-items: center;\n\n    width: 97%;\n    height: 70px;\n/*development: \n    border: rgb(226, 45, 32) 1px dotted; */\n                          }\n    \n\n/*All inputs*/\ninput{\n    color:#531010;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n     }\n\n\n\n\n/* Buttons */\n\n             \n    \n\n\n\n/* another class for an opaque button that \nhas hover and depress effects. this is for \nthe \"Erase all\" button, which must be red\nwhen enabled */\n.largeButton2{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: fit-content;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(238, 20, 20);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton2:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton2:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n\n/* The <p> for the text in the large button */\n.largeButtText {\n\nfont-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 22px;\n\nletter-spacing: -0.5px;\n\ncolor: rgb(112, 36, 184);\n\nmargin: 0px;\npadding: 0px;\n\n               }            \n\n\n/* \nThe div enclosing the \nbuttons \"New project\", \n\"New todo\" and \"Edit title\" \n*/\n.buttonEnclosingDiv1{\nposition: relative;\n\n/* No longer needed as \nthis div goes into a \ndiv that uses flexbox:\ntop:346px;\nleft:15px;\n*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: center;\n\npadding-bottom: 3px;\n\nwidth: 450px;\nheight: 40px;\nbackground-color: rgb(209, 184, 238);\nborder: rgb(214, 206, 206) 3px outset;\nborder-radius: 5px;;\n                 }\n\n/* \nThe div enclosing the \nbutton \"Erase all\" \n*/\n.buttonEnclosingDiv3{\n\n    position: relative;\n/*    */    \n    display: flex;\n    flex-direction: row;\n    justify-content: right;\n    align-items: center;\n\n    margin-left: auto;\n\n    padding-right: 10px;\n    padding-bottom: 3px;\n\n    width: 210px;\n    height: 40px;\n    background-color: rgb(209, 184, 238);\n    border: rgb(214, 206, 206) 3px outset;\n    border-radius: 5px;;\n                     }\n\n/*The div enclosing the ON OFF\n radio butons */\n.rbEncloseDiv{\n    position: absolute;\n    left: 2px;\n    top: -3px;\n    width: 110px;\n    height: 45px;\n\n    padding: 0px;\n\n    margin-top: 3px;\n    margin-right: 2px;    \n    /*\n    border: rgb(242, 14, 14) 2px outset;\n    border-radius: 5px; */\n             } \n\n\n.rbLabelFaded{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n    opacity: 0.3;\n             }\n\n.rbLabelONactive{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #f20808;\n    opacity: 1;\n                }\n\n\n\n\n\n\n\n/*The hr that separates the buttons\nfrom the display of the project folders*/\n\n.hrule1{\n    position: absolute;\n    left: 50px;\n    top: 320px;    \n\nwidth: 900px;\nheight: 20px;\n\nbackground-color: blanchedalmond;\n  border-radius: 5px;\n\n    }\n               \n\n/* The div that contains the project folders*/\n\n.topView{\n    position: absolute;\n    overflow-x: scroll;\n\ntop: 10px;\nleft: 15px;\n\nwidth: 900px;\nheight: 315px;\n\nbackground-color:white;\n\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n    }\n   \n    \n\n\n/* For the div to which code dynamically \nappends blown-up versions of the \nproject folders and stand-alone non-in-PF \ntodos */\n.bottomView {\n\n    position: absolute;\n\n    bottom: 10px;\n    left: 15px;\n    \n\nwidth: 900px;\nheight: 580px;\n\nbackground-color:white;\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n\n\noverflow-x: scroll;\n\n                   }\n\n/*--------------------------------------------------------*/\n\n/* for the divs that contain the instructions-*/\n.instructionP{\n    position: absolute;\n    \n    top: 20px;\n    left: 20px;\n    \n    width: 90%;\n    height: 90%;\n    \n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    line-height: 15px;    \n    \n    }\n\n\n/* for the divs that contain the instructions-*/\n.instructionDiv{\nposition: absolute;\n\ntop: 200px;\nleft: 200px;\n\nwidth: 300px;\nheight: 300px;\n\nbackground-color: #a2bbe0;\nborder-radius: 6px;\nborder: #3a1053 3px outset;\n\n}\n\n\n\n\n\n/*--------------------------------------------------------*/\n/*Styles for the topview project folder \nand topview todo */\n\n\n/*For the <div> that is the folder for the top view*/\n.pFolder{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: black 1px solid;\nborder-radius: 5px;\nbackground-color: burlywood;\npadding:0px;\nmargin: 0px;\n         }\n        /* in order: x offset, y offset, blur size, spread size, color */\n        /* blur size and spread size are optional (they default to 0) */\n  \n/* For the <div> that is a todo for the top view */\n.topViewTodo{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: rgb(236, 168, 148) 1px solid;\nborder-radius:5px;\nbackground-color: white;\n\npadding:0px;\nmargin: 0px;\n            }\n\n/* Code adds this class to the top-view PF div\non a click of that div. This class makes it \napparent that the user has selected the div */\n.pFolderSelected{\n    box-shadow: 0px 0px 5px 5px rgb(152, 193, 218);\n                }\n\n/*For the <p> in the top view div for\n the PF / todo.\nThis <p> reads \"Project\" or \"Todo\" */\n.topViewText{\n    position: absolute;\n    top: 5px;       \n    right: 5px;\n    font-family: 'Open Sans-Bold';\n    font-size: 20px;\n    line-height: 25px;\n    color: rgb(233, 66, 99);\n    background-color: rgb(250, 242, 242);\n\n    border-radius: 2px;\n    \n    padding:0px;\nmargin: 0px;\n\n             }\n\n/*For the <p> for the title of the proj fold or todo*/\n.topViewtitle{\n    position: absolute;\n    top: 35px;       \n    right:5px;\n    font-family: 'Open Sans-Bold';\nfont-size: 24px;\nline-height: 25px;\ncolor: rgb(61, 4, 16);\nbackground-color: rgb(238, 214, 219);\n\npadding:0px;\nmargin: 0px;\n\nmax-height: 150px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n            }\n\n/*--------------------------------------------------------*/  \n        \n\n\n\n\n/*The forms and dialog boxes*/\n/*The form for entering data \nabout a new project folder.\nCode calls this form after\nclick of \"New Project\" button*/\n.projFolderForm{\ndisplay: none;\n\nposition: absolute;\ntop: 500px;\nleft: 400px;\n\nwidth: 250px;\nheight: 100px;\n\nbackground-color: cyan;\nborder: darkblue solid 1px;\n\n}\n\n/* The submit button for the form above*/\n.newProjSubmit{\nposition: absolute;\ntop: 40px;\nleft: 15px;\n\nwidth: 65px;\nheight: 25px;\n\n              }\n\n\n/* The dialog box that tells the user \nthat a project of that name already exists */\n.projNameExistsDialogBox{\n    display: none;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n    top: 550px;\n    left: 450px;\n    \n    width: 250px;\n    height: 150px;\n    \n    background-color: cyan;\n    border: darkblue solid 5px;\n                        }\n\n/* The text for the <p> in the dialog box above */\n.projNameExistsText{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 24px;\nline-height: 25px;\n                   }\n\n/* The enclosing div for the general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsDialogBox{\n    display: block;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n       \n    width: 250px;\n    height: fit-content;\n    \n    background-color: rgb(221, 186, 141);\n    border: rgb(77, 2, 138) solid 5px;\n    border-radius: 7px;\n    z-index: 25;\n                        }\n\n/* The <p> for the text ofthe general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsText{\n    position: relative;\n    width: 80%;\n    left: 20px;\n    font-family: 'Open Sans-Bold';\n    font-size: 28px;\n    line-height: 29px;\n    color: #8a1010;\n                    }\n\n/*----*/\n\n\n\n/* div for a todo */\n.todoDiv{\n    position: absolute;\n    \n    width: 300px;\n    height: 400px;\n    \n    border: 2px solid red;\n                     }\n    \n    .testButtPos{\n        position: absolute;\n        left: 220px;\n        top: 10px;\n    }\n    \n        \n/*----------------*/\n\n\n\n/*A general input class*/\n.inputClass{\nwidth: 170px;\nheight: 20px;\n            }\n\n/*A general form label class*/\n.labelClass{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif ;\nfont-size: 16px;\ncolor: rgb(119, 2, 253);\n            }\n\n/*NO LONGER USED:*/\n/*id to position notes input*/\n#todoFormNotesInputPos{\n    position: absolute;\ntop: 380px;\nleft: 70px;\n\n                      }\n\n\n\n\n\n/*The div that is a child of div with class \nnotesEnclosingDivClass and that has child \n<p> of class notesP*/\n.notesTitleEncloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */    \n    \n                           }\n\n/*The <p> for text \"Notes\"*/\n.notesP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n       }\n\n\n\n/*The <div> in which the \nuser types notes*/\n.notesDiv {\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n          }\n\n/*The <p> for text that the user edits*/\n.notesTextP{\n    position: relative;\n    \n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n    color: rgb(7, 8, 0);\n    \n    padding: 0px;\n    margin: 0px;\n\n       }\n\n/* --------------------- --------------------  */\n\n/* Elements of the checklist */\n/* The checklist consists of \n1) an all-enclosing div \n2) a div to contain the <p> for the text \"Checklist\" \n3) a <p> for the text \"Checklist\" \n4) A div to contain the buttons\n5) two buttons to add and delete points\n(which comprise a div and a child <p>)\n6) a div in which the \"points\" plus their \ndescriptions go. Each checklist point \nconsists of an enlosing div in which there \nis a \"point\" div and a description div\n*/\n\n/* The all-enclosing checklist div.*/\n.bottomViewAllEncloseChecklistDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n    \nwidth: 95%;\nheight: fit-content;\n\nbackground-color: rgb(236, 185, 236);\nborder-radius: 6px;\nborder: rgb(235, 126, 23) 3px solid;\n\nmargin-bottom:10px;\n\n                                 }                   \n\n/* The div that contains the <p>\n for the text \"Checklist\" and the \n Add and Delete buttons*/\n.checklistPencloseDivClass{\n    position: relative;\n            \n    width: 100%;\n    height: 30px;\n    \n    border-bottom: rgb(204, 0, 255) 1px dotted;\n                          }                   \n    \n\n/* The <p> in the checklist \ndiv that reads \"Checklist\" */\n.bottomViewTodoChecklistP{\n    position: absolute;\n    top:5px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:37%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                         }\n\n\n/* Now the buttons for \n    \"Add point\" and \n    \"Delete point\", the <p> for the text in those buttons and the \n    actual checklist bullet symbols */\n\n/*The style for the checklist \nbuttons (divs) that add or delete points.\nThis provides style only, no positioning*/\n.addDeletePointButtons{\nwidth: 25px;\nheight: 25px;\n\n    background-color: rgb(192, 167, 216);\n    border: brown 1px solid;\n    border-radius: 3px;\n\n    padding: 0px;\n    margin: 0px;\n    \n}\n\n/*To position the + button*/\n#addPointButtonPos{\nposition: absolute;\ntop: 2px;\nright: 38px;\n                      }\n\n/*To position the - button*/\n#deletePointButtonPos{\n    position: absolute;\n    top: 2px;\n    right: 8px;\n                        }\n\n.addDeletePointButtons:hover{\n    background-color: rgb(254, 254, 255);\n                            }\n\n.addDeletePointButtons:active{\n    transform: translateY(2px);\n    transform: translateX(2px);\n    box-shadow: black 1px 1px 3px;\n                             }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.plusPointButtonsP{\nposition: absolute;\ntop:-2px;\nleft: 3px;\n    font-size: 36px;\nline-height: 27px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\npadding: 0px;\nmargin: 0px;\n                        }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.minusPointButtonsP{\n    position: absolute;\n    top:-6px;\n    left: 5px;\n        font-size: 46px;\n    line-height: 27px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/* The <p> for the text in the buttons that \nadd or delete a checklist point*/\n.addDeletePointButtonP{\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 15px;\n    \n    padding: 0px;\n    margin: 0px;;\n    \n                      }\n\n/* the interior div, which will contain\n lots of divs of class newPointContainerDiv \n (each of which will represent a checklist\n point and contain the \"point\" div and the\n description div) */\n.bottomViewTodoChecklistInteriorDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n        \n    position: relative;\n        \n    width: 97%;\n    min-height: 35px;\n    height: fit-content;\n\n    margin-bottom:3px;\n    margin-top:3px;\n    \n    /*development:\n    border: rgb(245, 212, 212) 1px solid; */\n\n    }              \n    \n/*A style code adds to the \"bullet\" div and \nits sibling description div in the checklist when \nthe user double-clicks the \"bullet\" div. Code \nremoves this class after five seconds*/    \n.selectedColour{\n    background-color: rgb(245, 166, 147);\n               }\n\n\n/*The enclosing div for the \npoint div + description div*/\n.newPointContainerDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n\n    width: 97%;\n    height: 25px;\n\n    /*Development:\n    border: rgb(0, 0, 0) 1px solid; */\n\n    cursor: move;\n                     }\n\n\n/* The checklist bullet*/\n    .checklistPoint{\n       display: flex;\n       flex-direction: column;\n       justify-content: center;\n       align-items: center; \n\n       width:  20px;\n       height: 20px;\n       border-top-left-radius:  4px;\n       border-bottom-left-radius: 4px; \n       border: 3px solid  rgb(113, 43, 226);;\n                    }\n\n/* The <p> that goes in the \"bullet\" div.\nCode will make this text a number  */\n.numberPara{\n    position: relative;\n\n    font-size: 18px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n\n    color: rgb(211, 100, 194);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n/* The <p> that goes in the \"point\" div \nof the checklist bullet points.\nCode make this text editable  */\n.pointPara{\n    position: relative;\n\n    height: 99%;\n\n    font-size: 16px;\n    font-family: 'Open Sans-Italic';\n\n    color: rgb(100, 9, 9);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n\n\n\n/* The checklist point description,\neg \"Vacuum the seats\" */\n.checklistDescription{\n   \n/* font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;*/\n\nwidth: 230px;\nheight: 20px;\nborder-top-right-radius: 4px;\nborder-bottom-right-radius: 4px;\n\nborder: 3px solid  rgb(180, 131, 243);\n\n                     }\n\n/*Styles for the \"bullet\" and \"point\"\ndivs when they are selected and not selected \n-- no need for four, reduce to two!!!\n*/\n\n.backgroundNotSelected{\n    background-color: rgb(237, 226, 243);\n                            }    \n\n.backgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n.descrpBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.descrpBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n                         \n.bulletBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.bulletBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                        }\n    \n\n/*-----------------------------------------------------------------------------------*/    \n    /*Stuff that appears in the bottom view*/\n\n/* For the div that contains the div \n    that encloses a stand-alone \nnon-in-PF todo (for the bottomview) */\n.bottomViewTodoContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    top: 20px;\n    \n    width: 350px;\n    height: 520px;\n    border: rgb(196, 168, 168) 3px solid;\n    border-radius:8px;\n    background-color: rgb(253, 255, 255);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n                        }\n/* The div that contains the \nword \"Todo\" for a stand-alone\nnon-in-PF todo*/\n.bottomViewTDwordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 14px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n    \n/* The div that contains the word \"Todo\"\nfor a stand-alone in-PF todo and an \nunder-heading todo*/\n.bottomViewInPFtodoWordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 5px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n  \n\n\n/* for the divthat encloses the Delete \nand X buttons in the bottomView \nstandalone non-in-PF todo div */\n.buttsEnclosingDiv{\nwidth: 90%;\nheight: 100%;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n\nbackground-color: rgb(240, 232, 232);\n\n                  }\n\n\n/* The div that encloses a stand-alone \nnon-in-PF todo (for the bottomview)*/\n.bottomViewTodoEnclosingDiv {\n        \n    display: block;\n    /**/\n    position: relative;\n            \n    width: 97%;\n    height: fit-content;\n    /*Development\n    border: rgb(247, 3, 210) 6px dotted;\n    */\n    background-color: white;\n    \n    padding: 0px;\n    margin-top: 5px;\n    margin-left: 5px;\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n                             }\n\n\n/* The style for the div of the todo.\nCode makes this div for ay kind of \ntodo.\nThis div contains:\na) the div that contains the title\nand minimise square\nb) the div that contains text \"Select\" \nc) the div that contains everything else\n(date picker, Priority elements, \ndescription elements, Checklist elements \nand Notes elements)\n*/\n.bottomViewTodoDiv{\n    \n    display: block;\n\n    position: relative;\n    z-index: 1;\n\n    width: 93%;\n    /* Code will set height*/\n    \n    /*Development\n    border: rgb(206, 252, 4) 6px dotted; */\n     \n    border-radius: 3px;\n    padding: 0px;\n    margin: 10px;\n\n    background-color: rgb(199, 182, 199);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    box-sizing: border-box;\n                  }\n\n\n\n\n\n\n/* The div that contains the \n\"X\" button and that appears at the \ntop of the div that contains a \nnon-on-PF or in-PF todo in the \nbottomview */\n.bottomViewTodoButtonsEncloseDiv {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    \n    position: relative;\n        \n    width: 95%;\n    height: 35px;\n    \n    border: rgb(201, 192, 140) 2px solid;\n    background-color: rgb(144, 86, 219);\n    \n    padding: 0px;\n    margin: 0px;\n                                 }\n\n/* The P that contains the text \n\"Todo\" and that is a child of \nthe div of class \nbottomViewTodoButtonsEncloseDiv */\n.bottomViewTodoTextP {\n    \n    position: relative;\n        \n    height: 20px;\n    \n    border: rgb(255, 0, 13) 2px solid;\n    background-color: rgb(197, 163, 241);\n    \n    font-size: 16px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n\n    padding: 0px;\n    margin: 0px;\n    \n                                 }\n\n\n\n/* The div for the project folder*/\n.bottomViewProjFolderDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: absolute;\ntop: 20px;\n\nwidth: 350px;\nheight: 520px;\n\nborder: rgb(110, 83, 83) 3px solid;\nborder-radius:8px;\nbackground-color: rgb(201, 151, 90);\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\noverflow-x: hidden;\n                         }\n\n/* The animation class for the PF div*/\n.PFanimation{\nanimation: grow1 0.3s ease-in-out 1;\n            }\n\n\n\n\n\n/*the <p> for the title of the PF*/\n.bottomViewPFTitleP {\nposition: relative;\nleft: 5px;\ntop: 2px;\n\nfont-family: 'Open Sans-ExtraBold';\nfont-size: 30px;\nline-height: 32px;\n\npadding-bottom: 5px;\nmargin: 0px;\n\n/*overflow-y: hidden;*/\n                    }\n   \n/*The div that contains the <p> for \ntext \"Project\" in the bottom view*/\n.bottomViewPForTDwordEnclDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    background-color: rgb(196, 171, 140);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n                            }\n\n/*The <p> for \ntext \"Project\" */\n.bottomViewPForTDwordP{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\nline-height: 19px;\n\nposition: relative;\ncolor: rgb(243, 79, 79);\n\npadding:0px;\nmargin:0px;\n                      }\n\n/*The div that encloses the … */\n.bottomViewPFTitleEncloseDiv{\n    position: relative;\n    left: 0px;\n    \n    font-family: 'Open Sans-ExtraBold';\nfont-size: 33px;\nline-height: 32px;\n\n    height: fit-content;\n    /*min-height: 40px;*/\n    max-height: 128px;\n    width: 99%;\n\n    padding: 0px;\n    margin: 0px;\n    /* dev:\n    border: firebrick 1px dotted; */\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n\n                            }\n\n/*The following style is for a div \nthat encloses the top buttons in a \nPF div for the bottom view. Code \nuses the same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewPFtopButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 3px;\n    top: 20px;\n\n    height: 45px;\n    width: 98%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid;*/\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n/* The following style is for a div \nthat encloses the top buttons in a \nstandalone non-inPF TD. Code uses \nthe same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewStAlTDButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 15px;\n    top: 20px;\n\n    height: 45px;\n    width: 85.6%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid; */\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n\n/* the div in which code will put \n standalone non-in-PF todos.  */\n .bottomViewTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 65px;\n\n    /*\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    */\n  \n    width: 100%;\n    min-height: 50px;\n    /*height: fit-content;*/\n    height: 440px;\n\n    padding: 0px;\n    margin-top: 10px;\n/*Development    \nborder: rgb(255, 153, 0) 10px dotted; */\n\noverflow-y: scroll;\noverflow-x: hidden;\n                            }\n\n/* the div that sits below the PF \nbutton bar and that contains \ni) the div for the title \nii) the div that contains headings & todos */\n.pfTitleHeadingsTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 82px;\n    /*\n    border-top:rgb(0, 0, 0) 1px dotted;*/\n    width: 100%;\n    height: 435px;\n\n    overflow-y: scroll;\n\n}\n\n\n\n\n\n/* the div in which code will put \n heading divs (and obviously the todos\n in those heading divs). this div is \n the child of the div for the PF in \n the bottom view and goes below the \n PF title div and the div containing \n the \"New heading\" and \"New todo\" \n buttons*/\n .bottomViewHeadsTodosEncloseDiv{\n    position: relative;\n    left: 3px;\n    \n    margin-top:10px;\n\n    display: block;\n\n/**/\n    width: 98%;\n    /*height: fit-content;*/\n    height: 390px;\n    padding: 0px;\n    \n    border-radius: 7px;\n    border: rgb(116, 111, 111) 1px solid;\n    \n/*Development:    \nborder: red 10px dotted;\n*/\n\noverflow-y: scroll;\noverflow-x: hidden;\n\n}\n\n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDiv{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n/* The class to add to the heading div above \nwhen the user clicks on that div. The idea \nis to highlight the div to show the user has \nselected it*/\n.addGlowToBottomViewHeading{\nbox-shadow: 3px 3px 3px 3px #FF0000, -3px -3px 3px 3px  #FF0000;;\n                           }\n\n\n/* TES STUFF IN HERE TES STUFF IN HERE TES STUFF IN HERE */\n\n       /* a test div  */\n    .aDivForTESTing {\n    z-index: 25;\n\n    position: absolute;\n    left: 30px;\n    top: 30px;\n    \n    width: 100px;\n    height: 100px;\n\n    background-color: #dcdbab;\n\n    border:rgb(255, 0, 255) 3px dashed;\n    \n    padding: 0px;\n    margin: 0px;\n                                         }\n    \n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDivTEST{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDivTEST {\n    z-index: 4;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    \n    width: 97%;\n    height: fit-content;\n    \n    margin-top: 25px;\n    margin-bottom: 25px;\n    \n    border-top: 2px solid black;\n    border-bottom: 2px solid black;\n                             }\n    \n    /* The title <p> for a heading div in \n    the bottom view PF folder */\n    .bottomViewHeadingTitlePTEST {\n    \n    z-index: 7;\n    \n    position: relative;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 24px;\n    \n    width: 92%;\n    \n    color: rgb(57, 5, 109);\n    \n    padding: 0px;\n    margin: 0px;\n                             }\n\n\n/*END OF TEST CLASSES END OF TEST CLASSES END OF TEST CLASSES*/\n\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDiv {\nz-index: 4;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n\nwidth: 97%;\nheight: fit-content;\n\n/*Development\nborder:rgb(0, 110, 255) 3px solid; */\n\nmargin-top: 25px;\nmargin-bottom: 25px;\n\nborder-top: 2px solid black;\nborder-bottom: 2px solid black;\n                         }\n\n/* The title <p> for a heading div in \nthe bottom view PF folder */\n.bottomViewHeadingTitleP {\n\nz-index: 7;\n\nposition: relative;\ntop: -4px;\n\nfont-family: 'Open Sans-Italic';\nfont-size: 24px;\nline-height: 32px;\nwidth: 92%;\n\ncolor: rgb(57, 5, 109);\n\npadding: 0px;\nmargin: 0px;\n                         }\n\n/* The div that contains the todo div */\n.bottomViewHeadingTodoEncloseDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\nleft: 3px;\ntop: 30px;\n\nwidth: 94%;\n\n height: fit-content; \n min-height: 135px;\n\n\nborder:rgb(255, 0, 255) 3px dashed;\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\n                         }\n\n/* A style that code assigns to the \n appropriate div when the user wants to \nselect a PF/ in-PF standalone todo / \nheading / standalone todo. Code adds or\nremoves this class to/from the div in \nquestion when the user clicks the small \ndiv that reads \"Select\"\n */\n.selected{\n    /* box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;   */\n    box-shadow: 6px 6px 6px 6px #a2bbe0, -6px -6px 6px 6px #a2bbe0; \n         } \n\n/* the <p> for the text \"Select\" \nthat goes in every div that every\n todo.heading/PF has at the top */\n.selectP{\nposition: relative;\ncolor: rgb(186, 176, 194);\nfont-size: 16px;\nfont-family: 'Open Sans-ExtraBold';\n\n        }\n\n.selectDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n\nbackground-color: rgb(140, 0, 255);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n        }\n\n\n/* Fri28Jan22: note that the following four\nstyles are identical! Change to one style later \nonce you are sure there's no need for four \n(obviously individual) styles!*/\n\n/* Position for the PF\n Select div*/\n.pfSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                    }\n\n/* Position for the stand alone \nnon-inPF TD Select div*/\n.stAlTDSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 32px;\n                         }\n\n/* Position for the heading\nSelect div*/\n.headingSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n/* Position for the under-heading\nTD's Select div*/\n.inPFtodoSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n\n\n\n\n\n\n/* The div that will contain the <p> for the  \nheading and the square the user clicks \nto minimise the todo div (the one with brown\ndotted border in dev)*/\n.bottomViewTodoTitleEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    position: relative;\n    /*top: 20px;*/\n\n    width: 95.5%;\n    min-height: 19px; \n    /*height: fit-content;*/\n    \n    \n    border-radius: 3px;\n    border: rgb(163, 114, 58) 2px solid;\n     \n    padding: 0px;\n    margin-left: 5px;\n    margin-top: 25px;\n    margin-bottom: 10px;\n\n    background-color: rgb(240, 172, 234); \n\n    overflow-x: hidden;\n    overflow-y: hidden;\n                              }\n\n\n/*The <p> for the title for the todo*/\n.bottomViewTodoTitleP{\nz-index: 7;\n\nposition: relative;\ntop:-2px;\nleft: 3px;\n\nfont-family: 'Open Sans-SemiBold';\nfont-size: 20px;\nline-height: 26px;\n\nwidth: 91%;\nheight: fit-content;\n/*min-height: 25px;*/\n\nmargin: 0px;\npadding-top: 3px;\npadding-bottom: 3px;\n                     }\n\n/*The div that contains the up/down arrow\nas background image.*/\n.arrowDivClass{\nposition: relative;\n/*\nwidth: 7%;\nheight: 100%;\n*/\n\nwidth: 25px;\nheight: 25px;\n\n/*Development\nborder: darkblue 1px solid; */\n\nbackground-repeat:no-repeat;\nbackground-size:contain;\n\n              }\n\n\n/* The div that contains everything in the todo\nexcept the title enclosing div */\n.todoTheRestEnclosDivClass{\nposition: relative;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nwidth: 95.5%;\nheight: fit-content;\n/*\nborder: rgb(112, 112, 112) 1px solid; */\n\nmargin-left: 5px;\npadding: 0px;\n                     }\n\n\n\n\n\n.datePickerEncloseDivClass{\n    position: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\n    width: 100%;\n    height: 70px;\n\n    margin-bottom: 10px;\n    padding: 0px;\n/*Development\n    border: 3px dotted rgb(238, 234, 22) */\n                          }\n\n\n\n/*The div that encloses the <p> \nfor the text \"Priority\" in the todo*/\n.priorityPencloseDivClass{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n                            }\n\n\n/*The <p> for the text \"Priority\" in the todo*/\n.bottomViewTodoPriorityTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/*For the div that contains the RBs*/\n.rbContainerDiv{\nposition: absolute;\ntop:22px; \nleft:1px;   \n\nwidth: 95%;\nheight: 38px;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: flex-start;\n\n/*Development\nborder: rgb(198, 226, 43) 1px solid; */\n\n               }\n\n\n/*Now the labels for the radio buttons.\nNote that the class name of each label\nis the same as the id for its \ncorresponding RB*/\n               \n/*For the label for the very low radio button*/\n.veryLowRB{\nposition: absolute;\ntop: 17px;\nright: 93px ;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;\n\npadding: 0px;\nmargin: 0px;\n          }\n/*For the very low RB */\n#veryLowRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 110px ; */\n}\n\n\n/*For the label for the low radio button*/\n.lowRB{\n    position: absolute;\n    top: 17px;\n    right: 75px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n              }\n/*For the low RB */\n#lowRB{\n    position: relative;\n    /*\n    top: 5px;\n    right: 90px ; */\n}\n\n/*For the label for the medium radio button*/\n.mediumRB{\n    position: absolute;\n    top: 17px;\n    right: 52px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the medium RB */\n#mediumRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 65px ;*/\n         }\n\n/*For the label for the high radio button*/\n.highRB{\n    position: absolute;\n    top: 17px;\nright: 30px;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the high RB */\n#highRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 40px ; */\n       }\n\n\n/*For the label for the very high radio button*/\n.veryHighRB{\n    position: absolute;\n    top: 17px;\n    right: 1px;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n           }\n/*For the very high RB */\n#veryHighRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 10px ; */\n          }\n\n\n\n\n\n/* ---------- */\n\n/*The all-enclosing <div> for the description\nelements of the todo. This div contains the <p> for text \n\"Description\" and the div in which the user \ntypes the text ofthe description of the todo*/\n.descrAllEncloseDivClass{\n       \n    position: relative;\n    width: 95%;\n    height: fit-content;    \n\n    margin-bottom: 10px;\n    padding: 0px;\n\n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n                               }\n\n\n/*The div that contains the <p> for \nthe text \"Description\" in the todo*/\n.descrPencloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */\n                     }\n\n/*The <p> for the text \"Description\" in the todo*/\n.bottomViewTodoDescriptionTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n\n                               }\n    \n/*The <div> in which user types \nthe description of the todo*/\n.bottomViewTodoDescriptionDiv{\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n                         }\n\n\n\n/*NOW NOT NEEDED */\n/* The \"New heading\" button that appears in \nthe bottom-view project folder div */\n#newHeadButtDivBottViewID{\nposition: absolute;\ntop: 3px;\nright: 15px; \n                         }\n/*NOW NOT NEEDED */\n/* The \"New todo\" button that appears in \nthe bottom-view project folder div */\n#newTodoButtDivBottViewID{\n    position: absolute;\n    top: 3px;\n    right: 140px; \n                         }\n\n\n\n/* General dialog box to take in user input in \none input. Code sets the display value to \n\"block\" whenaim is to show the dialog box or\n\"none\" when the aim is to make the dialog box\ndisappear (ie when user hits \"Cancel\" or \nthe \"Submit\" button's callback has finished)*/\n.generalNameEntryBoxDiv{\nz-index: 5;\n\ndisplay: block;\n    \nposition: absolute;\n/* Code sets top and left attribs */\nwidth: 250px;\nheight: 250px;\n\nbackground-color: rgb(34, 132, 212);\nborder: chocolate 4px solid;\n\n                    }\n\n\n/* <p> for the general dialog box's \ntitle */\n.generalNameEntryBoxP{\n    position: absolute;\n    top : 15px;\n    left: 15px;\n    \n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 16px;   \n        \n                    }\n\n/* For the General dialog box's \ninput*/\n#generalNameEntryBoxInput{\n    position: absolute;\n    \n    top: 60px;\n    left: 15px;\n    \n    width: 150px;\n    height: 25px;\n    \n    background-color: rgb(211, 227, 240);\n    border: rgb(59, 29, 8) 1px solid;\n    \n                        }\n\n                       \n/* jQuery UI datepicker stuff follows */\n/* ----------  ----------  ----------  ----------  ----------  ---------- */\n\n/*date picker stuff:*/\n\n/*The <div> that contains \nthe <p> for text \"Pickdeadline \nand the input in \nwhich the jquery datepicker sits*/\n.datePicker1Class{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n\n                }\n    \n/*The <p> that reads \"Pick deadline\"*/\n.deadlineDatePickP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n}\n\n/* For the input. The user clcks in \nthis element to make the jQ date \npicker appear. This is where the date\ntext appears after users election from\nthe jQ date picker) */\n.datePickInputClass{\n    position: absolute;\n    top: 25px;\n    left: 2px;\n    background-color: rgb(212, 129, 154);\n    width: 90%;\n    height: fit-content;\n    margin-left: 0px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 18px;\n    color: rgb(112, 112, 112);\n                   }\n\n\n    /*One way of styling the text in the jquery datepicker.\n    However, it only styles the calendar:\n    .ui-widget { \n        font-family: Verdana,Arial,sans-serif; \n        font-size: 18px;\n        width: 260px;\n        background-color: floralwhite;\n               }\n    */\n    \n/* For all <a>s in the datepicker, which is \nwhat each date number is */ \n.ui-datepicker a {\n        color: #d35c5c;\n    }\n\n    \n    /* All styles that follow that beginwith \n    ui-datepicker are from the css file in jqueryUI\n    for the datepicker: */ \n\n\n    /*For the all-enclosing div of \n    the datepicker*/\n        .ui-datepicker {\n        width: 400px;\n        height: 330px;\n        padding: .2em .2em 0;\n        display: block;\n\n        /*Me:use of \"important!\" overrides the z-index that \n        jQ gives this div inline (a z-index of value 2)*/\n        z-index:16 !important;\n        border-radius: 10px;\n        border: #531010 7px outset;\n        background-color: rgb(235, 209, 241);\n        box-shadow: #070707 15px 15px 15px;\n                    }\n\n    .ui-datepicker .ui-datepicker-header {\n        position: relative;\n        padding: .2em 0;\n\n\n                                         }\n    .ui-datepicker .ui-datepicker-prev,\n    .ui-datepicker .ui-datepicker-next {\n        position: absolute;\n        top: 2px;\n        width: 1.8em;\n        height: 1.8em;\n        \n    }\n    .ui-datepicker .ui-datepicker-prev-hover,\n    .ui-datepicker .ui-datepicker-next-hover {\n        top: 1px;\n    }\n    \n    /*The text \"Prev\"*/\n    .ui-datepicker .ui-datepicker-prev {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        left: 2px;\n        top: -10px;\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n                                       }\n    /*The text \"Next\"*/\n    .ui-datepicker .ui-datepicker-next {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n        right: 30px;\n        top: -10px;\n                                        }\n    .ui-datepicker .ui-datepicker-prev-hover {\n        /**/\n        /*left: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-next-hover {\n        /*right: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-prev span,\n    .ui-datepicker .ui-datepicker-next span {\n        display: block;\n        position: absolute;\n        left: 50%;\n        margin-left: -8px;\n        top: 50%;\n        margin-top: -8px;\n    }\n    .ui-datepicker .ui-datepicker-title {\n        font-family: 'Open Sans-Italic';\n        font-size: 28px;\n        margin: 0 2.3em;\n        line-height: 1.8em;\n        text-align: center;\n        background-color: #e2c3c3;\n    }\n    .ui-datepicker .ui-datepicker-title select {\n        font-size: 1em;\n        margin: 1px 0;\n    }\n    .ui-datepicker select.ui-datepicker-month,\n    .ui-datepicker select.ui-datepicker-year {\n        width: 45%;\n                                             }\n\n/* Styles follow for the date-picker table*/\n    .ui-datepicker table {\n        width: 100%;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 26px;\n        border-collapse: collapse;\n        margin: 0 0 .4em;\n        \n    }\n    .ui-datepicker th {\n        padding: 0px;\n        /*padding: .7em .3em;*/\n        /*text-align: center;\n        font-weight: bold;*/ \n        border: 0;\n        color: #3a1053;\n    }\n    .ui-datepicker td {\n        border: 0;\n        padding: 0px;\n    }\n    .ui-datepicker td span,\n    .ui-datepicker td a {\n        display: block;\n        padding: .2em;\n        text-align: center;\n        text-decoration: none;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane {\n        background-image: none;\n        margin: .7em 0 0 0;\n        padding: 0 .2em;\n        border-left: 0;\n        border-right: 0;\n        border-bottom: 0;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button {\n        float: right;\n        margin: .5em .2em .4em;\n        cursor: pointer;\n        padding: .2em .6em .3em .6em;\n        width: auto;\n        overflow: visible;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {\n        float: left;\n    }\n    \n    /* with multiple calendars */\n    .ui-datepicker.ui-datepicker-multi {\n        width: auto;\n    }\n    .ui-datepicker-multi .ui-datepicker-group {\n        float: left;\n    }\n    .ui-datepicker-multi .ui-datepicker-group table {\n        width: 95%;\n        margin: 0 auto .4em;\n    }\n    .ui-datepicker-multi-2 .ui-datepicker-group {\n        width: 50%;\n    }\n    .ui-datepicker-multi-3 .ui-datepicker-group {\n        width: 33.3%;\n    }\n    .ui-datepicker-multi-4 .ui-datepicker-group {\n        width: 25%;\n    }\n    .ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {\n        border-left-width: 0;\n    }\n    .ui-datepicker-multi .ui-datepicker-buttonpane {\n        clear: left;\n    }\n    .ui-datepicker-row-break {\n        clear: both;\n        width: 100%;\n        font-size: 0;\n    }\n    \n    /* RTL support */\n    .ui-datepicker-rtl {\n        direction: rtl;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev {\n        right: 2px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next {\n        left: 2px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev:hover {\n        right: 1px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next:hover {\n        left: 1px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane {\n        clear: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button {\n        float: left;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current,\n    .ui-datepicker-rtl .ui-datepicker-group {\n        float: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {\n        border-right-width: 0;\n        border-left-width: 1px;\n    }\n    \n    /* Icons \n    Me: these are todo with the \"Prev\" and \"Next\" words.\n\n       */\n    .ui-datepicker .ui-icon {\n        display: block;\n        text-indent: 0px; /*-99999px;*/\n        overflow: hidden;\n        background-repeat: no-repeat;\n        left: .5em;\n        top: .3em;\n                            }\n\n/*The form in which user inputs \nthe name of a new project, new \nheading or new todo*/\n.newFormOuterDiv{\nposition: absolute;\ntop: 50px;\nleft: 400px;\n\nz-index: 25;\n\nwidth: 300px;\nheight: fit-content;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nbackground-color: rgb(172, 144, 216);\nbox-shadow: rgb(0, 0, 0) 18px 18px 18px;\nborder: 2px solid rgb(179, 105, 105);\nborder-radius: 5px;\n                }\n\n/*The container div for the form <p>\n(which reads \"Type new name\") */\n.newFormPcontainerDiv{\n    position:relative;\n    left: 10px;\n    top: -2px;\n    margin:0px;\n    padding:0px;\n    \n    width: 100%;\n    height: 36px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n/*The <p> \n(which reads \"Type new name\") */\n.newFormP{\n    margin:0px;\n    padding:0px;\n\n    position:relative;\n    width: 100%;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 26px;\n    color: rgb(207, 184, 184);\n    \n                         }\n\n\n\n/*The container div for the form input*/\n.newFormInputContainerDiv{\n    position:relative;\n    width: 100%;\n    height: 36px;\n    /*development:\n    border:rgb(0, 0, 0) 1px dotted; */\n                         }\n\n.newFormInput {\nposition: relative;\nleft: 10px;\n\nheight: 25px;\nwidth: 75%;\n              }\n\n\n.newFormLabel{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 16px;\nposition: relative;\nleft: 10px;\n             }\n\n/*The container div for the form buttons*/\n.newFormButtonsContainerDiv{\n    position:relative;\n    display: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n    width: 95%;\n    height: 46px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n             \n\n\n#newFormSubmitButtonID{\n\n}\n\n#newFormCancelButtonID{\n\n}\n\n\n/*-----------------------------------------------------------------------------------*/\n\n\n/*ANIMATION KEYFRAMES FOLLOW*/\n@keyframes grow1 { \n    0% { \n        transform: scaleY(0); \n        transform: scaleX(0); \n        opacity:0.3;\n        } \n\n    50% { \n        /*transform: scaleY(1.2); */\n        transform: scaleX(1.2); \n        opacity:0.5;\n        } \n\n    100% { \n        transform: scaleY(1); \n        transform: scaleX(1); \n        opacity:1.0;\n        } \n\n}\n\n@keyframes growMenu {\n    from {height: 0px;}\n    to {height: fit-content;}\n  }\n\n\n/*-------------------------------------*/\n\n\n/*-- Classes for the rightmost button\nbar and the buttons in it --*/\n.rightMostButtonBar{\n    position: absolute;\n    top: 346px;\n    left: 585px;\n    \n    width: 150px;\n    height: 40px;\n    \n    background-color: rgb(209, 184, 238);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    z-index: 10;\n    }\n\n        \n\n/*-- Classes for ddMenu that uses javascript \nto animate the movement of the ddMenu \n(produces moevement that is a bit clunky \nas you cannot use a timing curve)---*/\n\n/*\nNOTE: NO LONGER USED!\nThe div to which code appends \nthe ddmenus. This div has the copper border\nand is the middle of the three button bars\n\n.testMenuEnclDiv{\nposition: absolute;\ntop: 346px;\nleft: 400px;\n\nwidth: 150px;\nheight: 40px;\n\nbackground-color: rgb(209, 184, 238);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\nz-index: 10;\n}\n*/\n\n\n\n\n/*-NOTE: code makes the style attributes of the \nmenuAllEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n.menuDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nposition: relative;\n\n    width: 93%;\nheight: 30px;\n\nbackground-color: rgb(115, 29, 212);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\n\nz-index: 15;\n        }\n\n\n.menuItemsEnclDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n    top: -120px;\n\n    width: 95%;\n    \n    background-color: none;\n    /*\n    border: rgb(14, 13, 13) 3px dotted; *//* nearly black*/\n    border-radius: 5px;\n\n    z-index: 10;\n\n    overflow-y: hidden;\n\n    }\n    \n.menuItemDiv{\n        position: relative;\n                \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n\n        width: 90%;\n        height: 30px;\n        \n        background-color: rgb(115, 29, 212);\n        border: rgb(224, 134, 134) 3px outset;\n        border-radius: 5px;\n        }\n    \n.menuItemP{\nfont-size: 16px;\nline-height: 17px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\ncolor: #e5baba;\n\n          }\n\n/*-------------------------------------*/\n/*-- Classes for ddMenu that uses transform and transition ---*/\n/*-- Note that the div to which to append the menu is \nthe same as in the case of the ddMenu made using javascript,\nhence does not appear here ---*/\n\n/*-NOTE: code makes the style attributes of the \nallEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n/*For the div that includes text \"Menu\"\n(or whatever the title of the DDmenu is\n(in the case of this app, \"How to use \nthis app\"))*/\n    .menuDiv1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    min-width: 80px;\n    width: fit-content;\n    height: 30px;\n    \n    background-color: rgb(115, 29, 212);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    \n    padding-left: 5px;\n    padding-right: 5px;    \n\n    z-index: 15;\n            }\n\n.menuDiv1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n/*A div that encloses all of the \nddmenu items. This div slides up and down\nas the user clicks either the menu items \nor the menu div*/\n    .menuItemsEnclDiv1{\n        \n        \n        position: relative;\n        /*top value set in dynamically*/\n        left: 0px;\n        width: 98%;\n        \n        /* nearly black in dev:\n        border: rgb(14, 13, 13) 3px dotted;  */\n        border-radius: 5px;\n    \n        z-index: 10;\n        \n        overflow-x: hidden;\n            overflow-y: hidden;\n                      }\n\n/*A div for each menu item*/        \n    .menuItemDiv1{\n            position: relative;\n            left:0px;      \n            /* Code sets top dynamically */  \n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n\n            width: 91px;\n            /*width: fit-content;*/\n            height: 30px;\n            \n            background-color: rgb(115, 29, 212);\n            border: rgb(224, 134, 134) 3px outset;\n            border-radius: 5px;\n            /*offsetHeight is height + 2*border\n            or 36px\n            */\n            overflow-x: hidden;\n            overflow-y: hidden;\n\n            }\n.menuItemDiv1:active{   \n    box-shadow: #d6c14c 5px 0px 5px, #d6c14c  -5px 0px 5px; \n    /*\n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n    */\n                    } \n\n\n/* The <p> for the title of each menu item*/\n    .menuItemP1{\n    font-size: 16px;\n    line-height: 17px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    color: #f5efef;\n    \n              }\n              \n/*-----------------------------------------------------------------------*/\n\n/*-------------------------------------*/\n/* Styles for the mobile-phone menu  */\n/*-------------------------------------*/\n\n/* A div with which you can quickly visually \ncompare an element to get a rough  \nidea of the length of that element */\n.rulerDiv{\n\nposition: absolute;\ntop: 70px;\nright: 0px;\n\nwidth: 78px;\nheight: 40px;\n\nbackground-color: #8a1010;\n\npadding: 0px;\nmargin: 0px;\n\n        }\n\n.rulerDivPosR{\n    top: 80px;\n    right: 0px;\n             }\n\n.rulerDivPosL{\n    top: 150px;\n    left: 0px;\n             }\n\n\n\n.visTestDiv{\nbackground-color: #a2bbe0;\nborder: #58f50a 1px dotted;\n\nposition: absolute;\ntop: 100px;\nleft:100px;\n\nwidth: 260px; \nheight: 250px;\n\nz-index: 35;\n\n/* 'visibility' makes an element\ninvisible but keeps it in its  \noriginal position and maintains\nits size: */\n/* visibility: hidden;  */\n           }\n\n\n/*-- style for the div that \nencloses the main menu items \n--*/\n.menuEncloseDiv{\nposition: absolute;\n\n/*Code sets the left property\nby adding another class*/\n\n/*display: block;*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\n\nborder: #000000 1px dotted;\n/*\nborder-top: #000000 2px dotted;\nborder-bottom: #000000 2px dotted; */\n\n/*  */\nwidth:fit-content;\nheight: 50px;\n\nmargin: 0px;\npadding: 0px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n\n               }\n\n\n/*-- style for the div that \nencloses the \"More...\" menu item\n --*/\n \n.moreEncloseDiv{\n    position: absolute;\n    /*Code sets the right property\n    by adding another class*/\n    \n    \n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    \n    /*\n    border: #f20f0f 1px dotted;\n    border-top: #000000 2px dotted;\n    border-bottom: #000000 2px dotted; */\n    \n    border-left: #f20f0f 1px dotted;\n    border-right: #0f31f2 1px dotted;\n\n    margin: 0px;\n    padding: 0px;\n\n    /*  */\n    width:fit-content;\n    height: 50px;\n    \n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    visibility: visible;\n    \n                   }\n\n/*-- for the div that encloses the \nmain menu items (which has main class \nmenuEncloseDiv) --*/\n.mainItemsEnclDivLeftPos{\n    top: 0px;\n    left: 0px;\n    \n                        }\n                        \n/*-- for the div that encloses the \n\"More...\" menu item (which has main class \nmoreEncloseDiv) --*/\n.moreItemEnclDivRightPos{\n    top: 0px;\n    right: 0px;\n    /*Code sets width*/\n                        }\n\n\n/*-- for the div that encloses the \nmain menu items in the case of the \nhard-coded items--*/\n.HCmainItemsEnclDivLeftPos{\n    left: 0px;\n    top: 100px;\n                        }\n\n/*-- for the div that encloses the \n\"More...\" menu item in the case of \nthe hard-coded \nitems --*/\n.HCmoreItemEnclDivRightPos{\n    top: 120px;\n    right: 0px;\n\n    /*Code sets width*/\n                        }\n\n/*-- the div for a menu item \nand the div for the \"More...\"\nitem --*/\n.menuItemDiv{\n\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 40px;\n    \noverflow-x: hidden;\noverflow-y: hidden;\n\nbackground-color: #dcdbab;\nborder: #531010 1px solid;\n\nmargin-left: 5px;\nmargin-right: 5px;\n\npadding-left: 10px;\npadding-right: 10px;\n\n            }\n            \n/*-- the <p> for the text \nof the menu item --*/\n.menuItemP{\n/*-- DON\"T USE THE FOLLOWING AS IT MUCKS UP \noffsetWidth:\nfont-family: 'Open Sans-ExtraBold';   --*/\n/*I have tested the following font and it seems \nto work: */\nfont-family: 'Open Sans-Condensed-ExtraBold'; \nfont-size: 14px;\nline-height: 15px;\n/*\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: clip;\n*/\n\ncolor: #4a0a6f;\n\npadding: 0px;\nmargin: 0px;\n         }\n\n\n\n/*-- the <p> for the text \nof the \"More\" menu item --*/\n.menuMoreItemP{\n/*I have tested the following font and it seems \nto work:    */    \n    font-family: 'Open Sans-Italic';\n    font-size: 14px;\n    line-height: 16px;\n    color: #52089d;\n    /*NOTE letter-spacing has no effect on this font!!*/\n    \n             }\n\n\n/*-- DON't USE -- DON't USE -- DON't USE \nThis style contains the dodgy font!!\nThe <p> for the text \nof the \"More\" menu item --*/\n.dodgyFontP{\n    font-family: 'Open Sans-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n    color: #52089d;\n    \n             }\n\n/* -- \nThe div that drops down \nwhen the user clicks \"More...\" \n--*/ \n.remainderItemsDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nalign-items: flex-end;\n\nposition: absolute;\n/* Code sets top and right values*/\n\nbackground-color: none; \nborder-radius: 5px;\ntransform-origin: top left;\ntransition: transform 0.3s ease-in-out 0s;\n                  }\n\n.remainderItemsDivExpand{\n    \ntransform: scaleY(1);\nheight: fit-content;\nwidth: fit-content;\n                        }\n\n.remainderItemsDivShrink{\n    \n    transform: scaleY(0);\n\n    height: fit-content;\n    width: fit-content;\n                        }\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/* End styles for mobile-phone menu  */\n/*-------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/*TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF*/\n/*-------------------------------------*/\n\n.testDiv0{\n    display: block;\n    position: absolute;\n    left: 500px;\n    top: 200px;    \n\n   width: 200px;\n    height: 200px;\n    background-color: rosybrown;\n    border: royalblue 1px solid;\n\n    padding: 0px;\n    margin: 0px;\n\n    z-index: 10;\n\n        }\n", "",{"version":3,"sources":["webpack://./src/styles.css"],"names":[],"mappings":"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","sourcesContent":["/*Fonts*/\n/*For the large buttons*/\n@font-face {\n    font-family: 'Open Sans-Condensed-ExtraBold'; /* This is a name of your choosing*/\n      src: url('./fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Bold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf') format('truetype');\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Italic';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf') format('truetype');\n           }\n\n/*For the title of under-heading TDs*/\n@font-face {\n    font-family: 'Open Sans-SemiBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf') format('truetype');\n           }\n\n/* Originally for the bottomView PF title*/\n/* DONT USE!!!! Using this font for the text in \na <p> in a <div> that code makes dynamically \nproduces an eroneous value for \ntheDiv.offsetWidth !!!!!!! (NOTE it seems to produce \nthe correct value when the div is hard-coded \nin html!!)*/\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n\n/* For the Select div's <p>\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n           */\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*An alert box*/\n.alertBoxOne{ \nvisibility: visible;\n\nz-index: 10;\nbackground-color: #caa3f0;\nposition: absolute;\ntop: 200px;\nleft: 100px;\n\nwidth: 400px;\nheight: 300px;\n\nborder: #0f31f2 10px solid;\nborder-radius: 10px;\n\n        }\n\n/*An alert box*/\n.alertBoxText{ \nfont-family: 'Courier New', Courier, monospace;\nfont-size: 36px;\ncolor: #dd1c1c;\n\n\n}\n\n\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n\n\n\n/*The all-enclosing div*/\n.enclDivClass{\nposition: relative;\n\nwidth: 1000px;\nheight: 1000px;\n\nmargin: 20px auto;\n\nborder: 2px solid black;\nborder-radius: 8px;\nbackground-color: rgb(182, 176, 176);\n             }\n\n\n/*For the divs that contain \nall of the stuff concerning either main numbers or luck stars numbers*/\n.contDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n       height: 400px; \n       width: 95%;\n        left: 17px;\n        top: 20px;\n    \n    border-radius: 3px;\n    \n    border: #570d82 5px outset;\n        }\n\n.positionContDivMain{\n position: absolute;\n top: 20px;\n left: 20px;\n                    }\n\n.positionContDivLucky{\n    position: absolute;\n    top: 450px;\n    left: 20px;\n                     }\n\n\n\n\n\n/*For the div that contains a\nheadline (ie \"Click below to ...\")*/\n.headlineEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n       height: 100px; \n       width: 95%px;\n        left: 17px;\n        top: 20px;\n    \n    border-radius: 3px;\n    \n    border: #a44cd6 5px outset;\n                }\n\n.positionHead{\n        position: absolute;\n        left: 17px;\n        top: 20px;\n                      }\n\n.headlineText{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 56px;\n             }\n\n/* The container div for the divs that contains the\nnumbers*/\n\n.numbersCont{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    position: absolute;\n    width: 95%;\n    height: 150px;    \n    left: 17px;\n        top: 200px;\n\n        border: #0f31f2 2px dotted;\n    }\n\n\n/* The container div for the number itself */\n\n.numberBox {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\nwidth: 120px;\nheight: 90%;\nborder: #531010 3px solid;\nborder-radius: 10px;\nbackground-color: #e0c6c6;\n\npadding: 0px;\nmargin: 20px;\n\n           }\n\n\n/*For the <p> in a number box*/\n.numberBoxText {\n    font-family: 'Open Sans-Bold';\n    font-size: 80px;\n    line-height: 80px;\nbackground-color: #e0c6c6;\n\npadding: 0px;\nmargin: 0px;\n\n           }\n\n\n\n\n\n\n\n.battleshipsText {\n    font-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 108px;\npadding: 0px;\nmargin: 0px;\n                 }\n\n\n\n/* The enclosing div for the\ntext that reads \"Home waters\"\nand \"Enemy waters\" */\n.watersTextEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    top: 195px;\n    left: 217px;\n    \n    width: 1199px;\n        \n    height: 100px;\n    \n    background-color: rgb(160, 218, 234);\n    border-radius: 6px;\n    border: rgb(23, 136, 235) 3px solid;\n    \n                       }\n\n  /* The <p> for the text in waters div */\n  .watersText {\n    font-family: 'Open Sans-Italic';\n    font-size: 56px;\n    \n    margin: 0px;\n    padding: 0px;\n              } \n\n\n\n  /* The <div> that encloses the \n  area where user selects his/her ships*/\n  .shipsEnclosingDiv{\nposition: absolute;\nleft: 17px;\ntop: 195px;\n\nwidth: 190px;\nheight: 640px;\n\nborder:rgb(34, 132, 212) 2px ridge;\n\n\n                    }\n\n/* The <div> that encloses the \ndiv that contains the <p> for text\n \"Place your vessels\"*/\n.placementEnclDiv{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    \n    width: 180px;\n    height: 97px;\n    \n    border:rgb(34, 132, 212) 2px ridge;\n\n    margin: 0px;\n    padding: 0px;    \n \n    }\n\n/* The <p> for text \"Place your vessels\"*/\n.shipsP{\n    font-family: 'Open Sans-Bold';\n    font-size: 30px;\n\n    margin: 0px;\n    padding: 0px;    \n\n    opacity: 1;\n       }\n\n/* The div containing the actual vessels*/\n.vesselsContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n\n    position: absolute;\n    left: 3px;\n    top: 106px;\n    \n    width: 180px;\n    height: 420px;\n    \n    border:rgb(34, 132, 212) 2px ridge;\n\n                }\n\n/* The vessels themselves.\nThis is for a div that contains a\n<p> for, eg, \"Place your battleship\"*/\n.vessels{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n    position: relative;\n    \n    width: 170px;\n    height: 50px;\n    \n    border:rgb(76, 104, 127) 2px dotted;\n        }\n\n\n/* The div containing \ni)   the <p> for text \"destroyer\" (eg)\nii)  the div containing the RBs and \n     the smallButton\n*/\n.vesselsTextDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 90px;\n    width: 160px;\n    border:rgb(26, 211, 19) 2px dotted;        \n   \n               }\n\n\n/* The div containing \nthe RBs and the smallButton\n*/\n.buttsCont{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 40%;\n    width: 100%;\n    border:rgb(211, 102, 19) 2px dotted;        \n    \n               }\n\n/* The radio buttons*/\n .rButt {\nwidth: 30px;\nheight: 30px;\nborder: 5px solid rgb(110, 8, 138);\n\nopacity: 0.2;\n        }\n\n/*The radio button label */\n.rbLabel{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n\n    opacity: 0.2;\n        }\n\n\n\n.rButt label {\n        /*display: inline-block;*/\n        position: relative;\n        left: -55px;\n        background-color: #520560;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 18px;\n        cursor: pointer;\n\n      }      \n.rButt:checked+label {\n        background-color: #d2aed8;\n        padding: 10px;\n      }\n\n/* The labelsfor the \nradio buttons*/\n/*\n.rbLabel {\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    position: relative;\n    left: -5px;\n    color: #3a1053;\n         }\n*/\n\n\n/* The small buttons the user employs\n   to place his/her vessels*/\n.smallButton{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    width: 35px;\n    height: 25px;\n    \n    border: bisque 1px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(134, 71, 200);\n    \n    box-shadow: black 3px 3px 3px;\n    \n    margin-right: 0px;\n\n    opacity: 1;\n    \n                }\n    \n    .smallButton:hover{ \n        background-color: rgb(99, 114, 109);\n                      }  \n    \n    \n    .smallButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                       } \n    \n\n\n\n\n\n\n\n\n/* The <p> for the text, eg \n\"Place your carrier*/\n.vesselsText{\n    font-family: 'Open Sans-SemiBold';\n    font-size: 16px;\n    width: 160px;\n   margin: 0px;\n   padding: 0px;\n\n   opacity: 0.2;\n            }\n\n\n/* NOT BEING USED*/            \n/* For the img of the ship*/\n.shipImage{\n    width: 160px;\n    height: 180px;\n    border:rgb(190, 55, 14) 2px dashed;\n         }\n/* NOT BEING USED*/            \n\n\n  /* The <div> that encloses the homewaters \n  and enemy waters grid divs*/\n.seasEnclosingDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    opacity: 1;\n\n\n    position: relative;\n    top: 195px;\n    left: 217px;\n    \n    width: 1199px;\n    height: 590px;\n       border: 1px dotted rgb(193, 32, 179) \n                 }\n\n  /* The <div> for the home waters.\n  This is a container grid  */\n.homeWatersDiv{\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 550px;\nwidth: 550px;\n\n    border: 1px solid rgb(68, 68, 176);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\nbackground-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* Resize the background image to cover the entire container */\n\n}\n\n  /* The <div> for the enemy waters.\n  This is a container grid. It contains the 100\n  white squares  */\n  .enemyWatersDiv{\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 550px;\nwidth: 550px;\n\n    border: 1px solid rgb(68, 68, 176);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\nbackground-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* Resize the background image to cover the entire container */\n\n}\n\n\n/* For the 100 divs of the home waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.homeGridSquare{\nheight: 48px;\nwidth: 48px;\n\nborder-style: groove;\n    border-width: 2px;\n    border-color: #000000;\n    border-radius: 2px;\nbackground-color: #ffffff;\n            }\n\n/* For the 100 divs of the enemy waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.enemyGridSquare{\n    height: 48px;\n    width: 48px;\n    \n    border-style: groove;\n        border-width: 2px;\n        border-color: #000000;\n        border-radius: 2px;\n    background-color: #ffffff;\n                }\n    \n\n\n\n\n\n\n\n\n\n\n/* ------------------------ */\n\n\n/* the class for an opaque button that \nhas hover and depress effects. This div \nis a child of div of class headlineEnclDiv*/\n.largeButton1{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: 200px;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(250, 238, 214);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton1:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n/*For the <p> of the text \n\"start\" / \"restart\" */\n.largeButton1Text{\n    font-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 28px;\ncolor: #6f19c4;\n                 }\n\n.mainButtPos{\n    position: absolute;\n    left: 25px;\n    top: 150px;\n}\n\n.mainClearButtPos{\n    position: absolute;\n    left: 550px;\n    top: 150px;\n}\n\n.luckyButtPos{\n    position: absolute;\n    left: 25px;\n    top: 150px;\n}\n\n.luckyClearButtPos{\n    position: absolute;\n    left: 550px;\n    top: 150px;\n}\n\n\n\n\n\n\n/* ------------------------ */\n\n/* Large buttons */\n/* the class for a faded button that \nhas no hover or depress effect */\n.largeButton{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \nwidth: fit-content;\nheight: 30px;\n\nborder: bisque 1px solid ;\nborder-radius: 5px 5px 5px 5px ;\n\nbackground-color: rgb(235, 198, 181);\nbox-shadow: black 3px 3px 3px;\n\nopacity: 0.3;\n\npointer-events: none;\n            }\n\n/* ------------------------ */\n\n\n\n\n\n\n\n\n\n\n.warnBoxDiv{\nposition: absolute;\n/*code sets top and left values*/\n\nz-index: 25;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between; \n    align-items: center;\n    \n    width: 400px;\n    height: 200px;\n\n    border: rgb(107, 88, 65) 4px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(231, 64, 22);\n    \n    box-shadow: black 16px 16px 20px;\n        }\n\n/* For the <p> of the warning box\nthat contains the text \"You are \nabout to … */\n.warnBoxText{\nposition: relative;        \n\nfont-size: 28px;\nfont-family: 'Open Sans-Italic';\n\ncolor: rgb(238, 226, 226);\n\n            }\n     \n/*For the div that contains the <p>\nthat is the text ofthe warning box*/\n.warnBoxPcontainDiv{\nposition: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\nwidth: 94%;\nheight: 150px;\n/*development\nborder: blue 1px dotted;*/\n\npadding:0px;\n\n                   }\n\n/* For the div that contains the \nCancel and OK buttons of the \nwarning box */\n.warnBoxButtonsContainDiv{\n    position: relative;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content:space-between; \n    align-items: center;\n\n    width: 97%;\n    height: 70px;\n/*development: \n    border: rgb(226, 45, 32) 1px dotted; */\n                          }\n    \n\n/*All inputs*/\ninput{\n    color:#531010;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n     }\n\n\n\n\n/* Buttons */\n\n             \n    \n\n\n\n/* another class for an opaque button that \nhas hover and depress effects. this is for \nthe \"Erase all\" button, which must be red\nwhen enabled */\n.largeButton2{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: fit-content;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(238, 20, 20);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton2:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton2:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n\n/* The <p> for the text in the large button */\n.largeButtText {\n\nfont-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 22px;\n\nletter-spacing: -0.5px;\n\ncolor: rgb(112, 36, 184);\n\nmargin: 0px;\npadding: 0px;\n\n               }            \n\n\n/* \nThe div enclosing the \nbuttons \"New project\", \n\"New todo\" and \"Edit title\" \n*/\n.buttonEnclosingDiv1{\nposition: relative;\n\n/* No longer needed as \nthis div goes into a \ndiv that uses flexbox:\ntop:346px;\nleft:15px;\n*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: center;\n\npadding-bottom: 3px;\n\nwidth: 450px;\nheight: 40px;\nbackground-color: rgb(209, 184, 238);\nborder: rgb(214, 206, 206) 3px outset;\nborder-radius: 5px;;\n                 }\n\n/* \nThe div enclosing the \nbutton \"Erase all\" \n*/\n.buttonEnclosingDiv3{\n\n    position: relative;\n/*    */    \n    display: flex;\n    flex-direction: row;\n    justify-content: right;\n    align-items: center;\n\n    margin-left: auto;\n\n    padding-right: 10px;\n    padding-bottom: 3px;\n\n    width: 210px;\n    height: 40px;\n    background-color: rgb(209, 184, 238);\n    border: rgb(214, 206, 206) 3px outset;\n    border-radius: 5px;;\n                     }\n\n/*The div enclosing the ON OFF\n radio butons */\n.rbEncloseDiv{\n    position: absolute;\n    left: 2px;\n    top: -3px;\n    width: 110px;\n    height: 45px;\n\n    padding: 0px;\n\n    margin-top: 3px;\n    margin-right: 2px;    \n    /*\n    border: rgb(242, 14, 14) 2px outset;\n    border-radius: 5px; */\n             } \n\n\n.rbLabelFaded{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n    opacity: 0.3;\n             }\n\n.rbLabelONactive{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #f20808;\n    opacity: 1;\n                }\n\n\n\n\n\n\n\n/*The hr that separates the buttons\nfrom the display of the project folders*/\n\n.hrule1{\n    position: absolute;\n    left: 50px;\n    top: 320px;    \n\nwidth: 900px;\nheight: 20px;\n\nbackground-color: blanchedalmond;\n  border-radius: 5px;\n\n    }\n               \n\n/* The div that contains the project folders*/\n\n.topView{\n    position: absolute;\n    overflow-x: scroll;\n\ntop: 10px;\nleft: 15px;\n\nwidth: 900px;\nheight: 315px;\n\nbackground-color:white;\n\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n    }\n   \n    \n\n\n/* For the div to which code dynamically \nappends blown-up versions of the \nproject folders and stand-alone non-in-PF \ntodos */\n.bottomView {\n\n    position: absolute;\n\n    bottom: 10px;\n    left: 15px;\n    \n\nwidth: 900px;\nheight: 580px;\n\nbackground-color:white;\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n\n\noverflow-x: scroll;\n\n                   }\n\n/*--------------------------------------------------------*/\n\n/* for the divs that contain the instructions-*/\n.instructionP{\n    position: absolute;\n    \n    top: 20px;\n    left: 20px;\n    \n    width: 90%;\n    height: 90%;\n    \n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    line-height: 15px;    \n    \n    }\n\n\n/* for the divs that contain the instructions-*/\n.instructionDiv{\nposition: absolute;\n\ntop: 200px;\nleft: 200px;\n\nwidth: 300px;\nheight: 300px;\n\nbackground-color: #a2bbe0;\nborder-radius: 6px;\nborder: #3a1053 3px outset;\n\n}\n\n\n\n\n\n/*--------------------------------------------------------*/\n/*Styles for the topview project folder \nand topview todo */\n\n\n/*For the <div> that is the folder for the top view*/\n.pFolder{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: black 1px solid;\nborder-radius: 5px;\nbackground-color: burlywood;\npadding:0px;\nmargin: 0px;\n         }\n        /* in order: x offset, y offset, blur size, spread size, color */\n        /* blur size and spread size are optional (they default to 0) */\n  \n/* For the <div> that is a todo for the top view */\n.topViewTodo{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: rgb(236, 168, 148) 1px solid;\nborder-radius:5px;\nbackground-color: white;\n\npadding:0px;\nmargin: 0px;\n            }\n\n/* Code adds this class to the top-view PF div\non a click of that div. This class makes it \napparent that the user has selected the div */\n.pFolderSelected{\n    box-shadow: 0px 0px 5px 5px rgb(152, 193, 218);\n                }\n\n/*For the <p> in the top view div for\n the PF / todo.\nThis <p> reads \"Project\" or \"Todo\" */\n.topViewText{\n    position: absolute;\n    top: 5px;       \n    right: 5px;\n    font-family: 'Open Sans-Bold';\n    font-size: 20px;\n    line-height: 25px;\n    color: rgb(233, 66, 99);\n    background-color: rgb(250, 242, 242);\n\n    border-radius: 2px;\n    \n    padding:0px;\nmargin: 0px;\n\n             }\n\n/*For the <p> for the title of the proj fold or todo*/\n.topViewtitle{\n    position: absolute;\n    top: 35px;       \n    right:5px;\n    font-family: 'Open Sans-Bold';\nfont-size: 24px;\nline-height: 25px;\ncolor: rgb(61, 4, 16);\nbackground-color: rgb(238, 214, 219);\n\npadding:0px;\nmargin: 0px;\n\nmax-height: 150px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n            }\n\n/*--------------------------------------------------------*/  \n        \n\n\n\n\n/*The forms and dialog boxes*/\n/*The form for entering data \nabout a new project folder.\nCode calls this form after\nclick of \"New Project\" button*/\n.projFolderForm{\ndisplay: none;\n\nposition: absolute;\ntop: 500px;\nleft: 400px;\n\nwidth: 250px;\nheight: 100px;\n\nbackground-color: cyan;\nborder: darkblue solid 1px;\n\n}\n\n/* The submit button for the form above*/\n.newProjSubmit{\nposition: absolute;\ntop: 40px;\nleft: 15px;\n\nwidth: 65px;\nheight: 25px;\n\n              }\n\n\n/* The dialog box that tells the user \nthat a project of that name already exists */\n.projNameExistsDialogBox{\n    display: none;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n    top: 550px;\n    left: 450px;\n    \n    width: 250px;\n    height: 150px;\n    \n    background-color: cyan;\n    border: darkblue solid 5px;\n                        }\n\n/* The text for the <p> in the dialog box above */\n.projNameExistsText{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 24px;\nline-height: 25px;\n                   }\n\n/* The enclosing div for the general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsDialogBox{\n    display: block;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n       \n    width: 250px;\n    height: fit-content;\n    \n    background-color: rgb(221, 186, 141);\n    border: rgb(77, 2, 138) solid 5px;\n    border-radius: 7px;\n    z-index: 25;\n                        }\n\n/* The <p> for the text ofthe general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsText{\n    position: relative;\n    width: 80%;\n    left: 20px;\n    font-family: 'Open Sans-Bold';\n    font-size: 28px;\n    line-height: 29px;\n    color: #8a1010;\n                    }\n\n/*----*/\n\n\n\n/* div for a todo */\n.todoDiv{\n    position: absolute;\n    \n    width: 300px;\n    height: 400px;\n    \n    border: 2px solid red;\n                     }\n    \n    .testButtPos{\n        position: absolute;\n        left: 220px;\n        top: 10px;\n    }\n    \n        \n/*----------------*/\n\n\n\n/*A general input class*/\n.inputClass{\nwidth: 170px;\nheight: 20px;\n            }\n\n/*A general form label class*/\n.labelClass{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif ;\nfont-size: 16px;\ncolor: rgb(119, 2, 253);\n            }\n\n/*NO LONGER USED:*/\n/*id to position notes input*/\n#todoFormNotesInputPos{\n    position: absolute;\ntop: 380px;\nleft: 70px;\n\n                      }\n\n\n\n\n\n/*The div that is a child of div with class \nnotesEnclosingDivClass and that has child \n<p> of class notesP*/\n.notesTitleEncloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */    \n    \n                           }\n\n/*The <p> for text \"Notes\"*/\n.notesP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n       }\n\n\n\n/*The <div> in which the \nuser types notes*/\n.notesDiv {\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n          }\n\n/*The <p> for text that the user edits*/\n.notesTextP{\n    position: relative;\n    \n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n    color: rgb(7, 8, 0);\n    \n    padding: 0px;\n    margin: 0px;\n\n       }\n\n/* --------------------- --------------------  */\n\n/* Elements of the checklist */\n/* The checklist consists of \n1) an all-enclosing div \n2) a div to contain the <p> for the text \"Checklist\" \n3) a <p> for the text \"Checklist\" \n4) A div to contain the buttons\n5) two buttons to add and delete points\n(which comprise a div and a child <p>)\n6) a div in which the \"points\" plus their \ndescriptions go. Each checklist point \nconsists of an enlosing div in which there \nis a \"point\" div and a description div\n*/\n\n/* The all-enclosing checklist div.*/\n.bottomViewAllEncloseChecklistDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n    \nwidth: 95%;\nheight: fit-content;\n\nbackground-color: rgb(236, 185, 236);\nborder-radius: 6px;\nborder: rgb(235, 126, 23) 3px solid;\n\nmargin-bottom:10px;\n\n                                 }                   \n\n/* The div that contains the <p>\n for the text \"Checklist\" and the \n Add and Delete buttons*/\n.checklistPencloseDivClass{\n    position: relative;\n            \n    width: 100%;\n    height: 30px;\n    \n    border-bottom: rgb(204, 0, 255) 1px dotted;\n                          }                   \n    \n\n/* The <p> in the checklist \ndiv that reads \"Checklist\" */\n.bottomViewTodoChecklistP{\n    position: absolute;\n    top:5px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:37%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                         }\n\n\n/* Now the buttons for \n    \"Add point\" and \n    \"Delete point\", the <p> for the text in those buttons and the \n    actual checklist bullet symbols */\n\n/*The style for the checklist \nbuttons (divs) that add or delete points.\nThis provides style only, no positioning*/\n.addDeletePointButtons{\nwidth: 25px;\nheight: 25px;\n\n    background-color: rgb(192, 167, 216);\n    border: brown 1px solid;\n    border-radius: 3px;\n\n    padding: 0px;\n    margin: 0px;\n    \n}\n\n/*To position the + button*/\n#addPointButtonPos{\nposition: absolute;\ntop: 2px;\nright: 38px;\n                      }\n\n/*To position the - button*/\n#deletePointButtonPos{\n    position: absolute;\n    top: 2px;\n    right: 8px;\n                        }\n\n.addDeletePointButtons:hover{\n    background-color: rgb(254, 254, 255);\n                            }\n\n.addDeletePointButtons:active{\n    transform: translateY(2px);\n    transform: translateX(2px);\n    box-shadow: black 1px 1px 3px;\n                             }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.plusPointButtonsP{\nposition: absolute;\ntop:-2px;\nleft: 3px;\n    font-size: 36px;\nline-height: 27px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\npadding: 0px;\nmargin: 0px;\n                        }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.minusPointButtonsP{\n    position: absolute;\n    top:-6px;\n    left: 5px;\n        font-size: 46px;\n    line-height: 27px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/* The <p> for the text in the buttons that \nadd or delete a checklist point*/\n.addDeletePointButtonP{\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 15px;\n    \n    padding: 0px;\n    margin: 0px;;\n    \n                      }\n\n/* the interior div, which will contain\n lots of divs of class newPointContainerDiv \n (each of which will represent a checklist\n point and contain the \"point\" div and the\n description div) */\n.bottomViewTodoChecklistInteriorDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n        \n    position: relative;\n        \n    width: 97%;\n    min-height: 35px;\n    height: fit-content;\n\n    margin-bottom:3px;\n    margin-top:3px;\n    \n    /*development:\n    border: rgb(245, 212, 212) 1px solid; */\n\n    }              \n    \n/*A style code adds to the \"bullet\" div and \nits sibling description div in the checklist when \nthe user double-clicks the \"bullet\" div. Code \nremoves this class after five seconds*/    \n.selectedColour{\n    background-color: rgb(245, 166, 147);\n               }\n\n\n/*The enclosing div for the \npoint div + description div*/\n.newPointContainerDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n\n    width: 97%;\n    height: 25px;\n\n    /*Development:\n    border: rgb(0, 0, 0) 1px solid; */\n\n    cursor: move;\n                     }\n\n\n/* The checklist bullet*/\n    .checklistPoint{\n       display: flex;\n       flex-direction: column;\n       justify-content: center;\n       align-items: center; \n\n       width:  20px;\n       height: 20px;\n       border-top-left-radius:  4px;\n       border-bottom-left-radius: 4px; \n       border: 3px solid  rgb(113, 43, 226);;\n                    }\n\n/* The <p> that goes in the \"bullet\" div.\nCode will make this text a number  */\n.numberPara{\n    position: relative;\n\n    font-size: 18px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n\n    color: rgb(211, 100, 194);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n/* The <p> that goes in the \"point\" div \nof the checklist bullet points.\nCode make this text editable  */\n.pointPara{\n    position: relative;\n\n    height: 99%;\n\n    font-size: 16px;\n    font-family: 'Open Sans-Italic';\n\n    color: rgb(100, 9, 9);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n\n\n\n/* The checklist point description,\neg \"Vacuum the seats\" */\n.checklistDescription{\n   \n/* font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;*/\n\nwidth: 230px;\nheight: 20px;\nborder-top-right-radius: 4px;\nborder-bottom-right-radius: 4px;\n\nborder: 3px solid  rgb(180, 131, 243);\n\n                     }\n\n/*Styles for the \"bullet\" and \"point\"\ndivs when they are selected and not selected \n-- no need for four, reduce to two!!!\n*/\n\n.backgroundNotSelected{\n    background-color: rgb(237, 226, 243);\n                            }    \n\n.backgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n.descrpBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.descrpBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n                         \n.bulletBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.bulletBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                        }\n    \n\n/*-----------------------------------------------------------------------------------*/    \n    /*Stuff that appears in the bottom view*/\n\n/* For the div that contains the div \n    that encloses a stand-alone \nnon-in-PF todo (for the bottomview) */\n.bottomViewTodoContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    top: 20px;\n    \n    width: 350px;\n    height: 520px;\n    border: rgb(196, 168, 168) 3px solid;\n    border-radius:8px;\n    background-color: rgb(253, 255, 255);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n                        }\n/* The div that contains the \nword \"Todo\" for a stand-alone\nnon-in-PF todo*/\n.bottomViewTDwordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 14px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n    \n/* The div that contains the word \"Todo\"\nfor a stand-alone in-PF todo and an \nunder-heading todo*/\n.bottomViewInPFtodoWordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 5px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n  \n\n\n/* for the divthat encloses the Delete \nand X buttons in the bottomView \nstandalone non-in-PF todo div */\n.buttsEnclosingDiv{\nwidth: 90%;\nheight: 100%;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n\nbackground-color: rgb(240, 232, 232);\n\n                  }\n\n\n/* The div that encloses a stand-alone \nnon-in-PF todo (for the bottomview)*/\n.bottomViewTodoEnclosingDiv {\n        \n    display: block;\n    /**/\n    position: relative;\n            \n    width: 97%;\n    height: fit-content;\n    /*Development\n    border: rgb(247, 3, 210) 6px dotted;\n    */\n    background-color: white;\n    \n    padding: 0px;\n    margin-top: 5px;\n    margin-left: 5px;\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n                             }\n\n\n/* The style for the div of the todo.\nCode makes this div for ay kind of \ntodo.\nThis div contains:\na) the div that contains the title\nand minimise square\nb) the div that contains text \"Select\" \nc) the div that contains everything else\n(date picker, Priority elements, \ndescription elements, Checklist elements \nand Notes elements)\n*/\n.bottomViewTodoDiv{\n    \n    display: block;\n\n    position: relative;\n    z-index: 1;\n\n    width: 93%;\n    /* Code will set height*/\n    \n    /*Development\n    border: rgb(206, 252, 4) 6px dotted; */\n     \n    border-radius: 3px;\n    padding: 0px;\n    margin: 10px;\n\n    background-color: rgb(199, 182, 199);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    box-sizing: border-box;\n                  }\n\n\n\n\n\n\n/* The div that contains the \n\"X\" button and that appears at the \ntop of the div that contains a \nnon-on-PF or in-PF todo in the \nbottomview */\n.bottomViewTodoButtonsEncloseDiv {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    \n    position: relative;\n        \n    width: 95%;\n    height: 35px;\n    \n    border: rgb(201, 192, 140) 2px solid;\n    background-color: rgb(144, 86, 219);\n    \n    padding: 0px;\n    margin: 0px;\n                                 }\n\n/* The P that contains the text \n\"Todo\" and that is a child of \nthe div of class \nbottomViewTodoButtonsEncloseDiv */\n.bottomViewTodoTextP {\n    \n    position: relative;\n        \n    height: 20px;\n    \n    border: rgb(255, 0, 13) 2px solid;\n    background-color: rgb(197, 163, 241);\n    \n    font-size: 16px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n\n    padding: 0px;\n    margin: 0px;\n    \n                                 }\n\n\n\n/* The div for the project folder*/\n.bottomViewProjFolderDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: absolute;\ntop: 20px;\n\nwidth: 350px;\nheight: 520px;\n\nborder: rgb(110, 83, 83) 3px solid;\nborder-radius:8px;\nbackground-color: rgb(201, 151, 90);\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\noverflow-x: hidden;\n                         }\n\n/* The animation class for the PF div*/\n.PFanimation{\nanimation: grow1 0.3s ease-in-out 1;\n            }\n\n\n\n\n\n/*the <p> for the title of the PF*/\n.bottomViewPFTitleP {\nposition: relative;\nleft: 5px;\ntop: 2px;\n\nfont-family: 'Open Sans-ExtraBold';\nfont-size: 30px;\nline-height: 32px;\n\npadding-bottom: 5px;\nmargin: 0px;\n\n/*overflow-y: hidden;*/\n                    }\n   \n/*The div that contains the <p> for \ntext \"Project\" in the bottom view*/\n.bottomViewPForTDwordEnclDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    background-color: rgb(196, 171, 140);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n                            }\n\n/*The <p> for \ntext \"Project\" */\n.bottomViewPForTDwordP{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\nline-height: 19px;\n\nposition: relative;\ncolor: rgb(243, 79, 79);\n\npadding:0px;\nmargin:0px;\n                      }\n\n/*The div that encloses the … */\n.bottomViewPFTitleEncloseDiv{\n    position: relative;\n    left: 0px;\n    \n    font-family: 'Open Sans-ExtraBold';\nfont-size: 33px;\nline-height: 32px;\n\n    height: fit-content;\n    /*min-height: 40px;*/\n    max-height: 128px;\n    width: 99%;\n\n    padding: 0px;\n    margin: 0px;\n    /* dev:\n    border: firebrick 1px dotted; */\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n\n                            }\n\n/*The following style is for a div \nthat encloses the top buttons in a \nPF div for the bottom view. Code \nuses the same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewPFtopButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 3px;\n    top: 20px;\n\n    height: 45px;\n    width: 98%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid;*/\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n/* The following style is for a div \nthat encloses the top buttons in a \nstandalone non-inPF TD. Code uses \nthe same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewStAlTDButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 15px;\n    top: 20px;\n\n    height: 45px;\n    width: 85.6%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid; */\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n\n/* the div in which code will put \n standalone non-in-PF todos.  */\n .bottomViewTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 65px;\n\n    /*\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    */\n  \n    width: 100%;\n    min-height: 50px;\n    /*height: fit-content;*/\n    height: 440px;\n\n    padding: 0px;\n    margin-top: 10px;\n/*Development    \nborder: rgb(255, 153, 0) 10px dotted; */\n\noverflow-y: scroll;\noverflow-x: hidden;\n                            }\n\n/* the div that sits below the PF \nbutton bar and that contains \ni) the div for the title \nii) the div that contains headings & todos */\n.pfTitleHeadingsTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 82px;\n    /*\n    border-top:rgb(0, 0, 0) 1px dotted;*/\n    width: 100%;\n    height: 435px;\n\n    overflow-y: scroll;\n\n}\n\n\n\n\n\n/* the div in which code will put \n heading divs (and obviously the todos\n in those heading divs). this div is \n the child of the div for the PF in \n the bottom view and goes below the \n PF title div and the div containing \n the \"New heading\" and \"New todo\" \n buttons*/\n .bottomViewHeadsTodosEncloseDiv{\n    position: relative;\n    left: 3px;\n    \n    margin-top:10px;\n\n    display: block;\n\n/**/\n    width: 98%;\n    /*height: fit-content;*/\n    height: 390px;\n    padding: 0px;\n    \n    border-radius: 7px;\n    border: rgb(116, 111, 111) 1px solid;\n    \n/*Development:    \nborder: red 10px dotted;\n*/\n\noverflow-y: scroll;\noverflow-x: hidden;\n\n}\n\n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDiv{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n/* The class to add to the heading div above \nwhen the user clicks on that div. The idea \nis to highlight the div to show the user has \nselected it*/\n.addGlowToBottomViewHeading{\nbox-shadow: 3px 3px 3px 3px #FF0000, -3px -3px 3px 3px  #FF0000;;\n                           }\n\n\n/* TES STUFF IN HERE TES STUFF IN HERE TES STUFF IN HERE */\n\n       /* a test div  */\n    .aDivForTESTing {\n    z-index: 25;\n\n    position: absolute;\n    left: 30px;\n    top: 30px;\n    \n    width: 100px;\n    height: 100px;\n\n    background-color: #dcdbab;\n\n    border:rgb(255, 0, 255) 3px dashed;\n    \n    padding: 0px;\n    margin: 0px;\n                                         }\n    \n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDivTEST{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDivTEST {\n    z-index: 4;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    \n    width: 97%;\n    height: fit-content;\n    \n    margin-top: 25px;\n    margin-bottom: 25px;\n    \n    border-top: 2px solid black;\n    border-bottom: 2px solid black;\n                             }\n    \n    /* The title <p> for a heading div in \n    the bottom view PF folder */\n    .bottomViewHeadingTitlePTEST {\n    \n    z-index: 7;\n    \n    position: relative;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 24px;\n    \n    width: 92%;\n    \n    color: rgb(57, 5, 109);\n    \n    padding: 0px;\n    margin: 0px;\n                             }\n\n\n/*END OF TEST CLASSES END OF TEST CLASSES END OF TEST CLASSES*/\n\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDiv {\nz-index: 4;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n\nwidth: 97%;\nheight: fit-content;\n\n/*Development\nborder:rgb(0, 110, 255) 3px solid; */\n\nmargin-top: 25px;\nmargin-bottom: 25px;\n\nborder-top: 2px solid black;\nborder-bottom: 2px solid black;\n                         }\n\n/* The title <p> for a heading div in \nthe bottom view PF folder */\n.bottomViewHeadingTitleP {\n\nz-index: 7;\n\nposition: relative;\ntop: -4px;\n\nfont-family: 'Open Sans-Italic';\nfont-size: 24px;\nline-height: 32px;\nwidth: 92%;\n\ncolor: rgb(57, 5, 109);\n\npadding: 0px;\nmargin: 0px;\n                         }\n\n/* The div that contains the todo div */\n.bottomViewHeadingTodoEncloseDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\nleft: 3px;\ntop: 30px;\n\nwidth: 94%;\n\n height: fit-content; \n min-height: 135px;\n\n\nborder:rgb(255, 0, 255) 3px dashed;\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\n                         }\n\n/* A style that code assigns to the \n appropriate div when the user wants to \nselect a PF/ in-PF standalone todo / \nheading / standalone todo. Code adds or\nremoves this class to/from the div in \nquestion when the user clicks the small \ndiv that reads \"Select\"\n */\n.selected{\n    /* box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;   */\n    box-shadow: 6px 6px 6px 6px #a2bbe0, -6px -6px 6px 6px #a2bbe0; \n         } \n\n/* the <p> for the text \"Select\" \nthat goes in every div that every\n todo.heading/PF has at the top */\n.selectP{\nposition: relative;\ncolor: rgb(186, 176, 194);\nfont-size: 16px;\nfont-family: 'Open Sans-ExtraBold';\n\n        }\n\n.selectDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n\nbackground-color: rgb(140, 0, 255);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n        }\n\n\n/* Fri28Jan22: note that the following four\nstyles are identical! Change to one style later \nonce you are sure there's no need for four \n(obviously individual) styles!*/\n\n/* Position for the PF\n Select div*/\n.pfSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                    }\n\n/* Position for the stand alone \nnon-inPF TD Select div*/\n.stAlTDSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 32px;\n                         }\n\n/* Position for the heading\nSelect div*/\n.headingSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n/* Position for the under-heading\nTD's Select div*/\n.inPFtodoSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n\n\n\n\n\n\n/* The div that will contain the <p> for the  \nheading and the square the user clicks \nto minimise the todo div (the one with brown\ndotted border in dev)*/\n.bottomViewTodoTitleEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    position: relative;\n    /*top: 20px;*/\n\n    width: 95.5%;\n    min-height: 19px; \n    /*height: fit-content;*/\n    \n    \n    border-radius: 3px;\n    border: rgb(163, 114, 58) 2px solid;\n     \n    padding: 0px;\n    margin-left: 5px;\n    margin-top: 25px;\n    margin-bottom: 10px;\n\n    background-color: rgb(240, 172, 234); \n\n    overflow-x: hidden;\n    overflow-y: hidden;\n                              }\n\n\n/*The <p> for the title for the todo*/\n.bottomViewTodoTitleP{\nz-index: 7;\n\nposition: relative;\ntop:-2px;\nleft: 3px;\n\nfont-family: 'Open Sans-SemiBold';\nfont-size: 20px;\nline-height: 26px;\n\nwidth: 91%;\nheight: fit-content;\n/*min-height: 25px;*/\n\nmargin: 0px;\npadding-top: 3px;\npadding-bottom: 3px;\n                     }\n\n/*The div that contains the up/down arrow\nas background image.*/\n.arrowDivClass{\nposition: relative;\n/*\nwidth: 7%;\nheight: 100%;\n*/\n\nwidth: 25px;\nheight: 25px;\n\n/*Development\nborder: darkblue 1px solid; */\n\nbackground-repeat:no-repeat;\nbackground-size:contain;\n\n              }\n\n\n/* The div that contains everything in the todo\nexcept the title enclosing div */\n.todoTheRestEnclosDivClass{\nposition: relative;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nwidth: 95.5%;\nheight: fit-content;\n/*\nborder: rgb(112, 112, 112) 1px solid; */\n\nmargin-left: 5px;\npadding: 0px;\n                     }\n\n\n\n\n\n.datePickerEncloseDivClass{\n    position: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\n    width: 100%;\n    height: 70px;\n\n    margin-bottom: 10px;\n    padding: 0px;\n/*Development\n    border: 3px dotted rgb(238, 234, 22) */\n                          }\n\n\n\n/*The div that encloses the <p> \nfor the text \"Priority\" in the todo*/\n.priorityPencloseDivClass{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n                            }\n\n\n/*The <p> for the text \"Priority\" in the todo*/\n.bottomViewTodoPriorityTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/*For the div that contains the RBs*/\n.rbContainerDiv{\nposition: absolute;\ntop:22px; \nleft:1px;   \n\nwidth: 95%;\nheight: 38px;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: flex-start;\n\n/*Development\nborder: rgb(198, 226, 43) 1px solid; */\n\n               }\n\n\n/*Now the labels for the radio buttons.\nNote that the class name of each label\nis the same as the id for its \ncorresponding RB*/\n               \n/*For the label for the very low radio button*/\n.veryLowRB{\nposition: absolute;\ntop: 17px;\nright: 93px ;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;\n\npadding: 0px;\nmargin: 0px;\n          }\n/*For the very low RB */\n#veryLowRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 110px ; */\n}\n\n\n/*For the label for the low radio button*/\n.lowRB{\n    position: absolute;\n    top: 17px;\n    right: 75px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n              }\n/*For the low RB */\n#lowRB{\n    position: relative;\n    /*\n    top: 5px;\n    right: 90px ; */\n}\n\n/*For the label for the medium radio button*/\n.mediumRB{\n    position: absolute;\n    top: 17px;\n    right: 52px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the medium RB */\n#mediumRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 65px ;*/\n         }\n\n/*For the label for the high radio button*/\n.highRB{\n    position: absolute;\n    top: 17px;\nright: 30px;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the high RB */\n#highRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 40px ; */\n       }\n\n\n/*For the label for the very high radio button*/\n.veryHighRB{\n    position: absolute;\n    top: 17px;\n    right: 1px;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n           }\n/*For the very high RB */\n#veryHighRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 10px ; */\n          }\n\n\n\n\n\n/* ---------- */\n\n/*The all-enclosing <div> for the description\nelements of the todo. This div contains the <p> for text \n\"Description\" and the div in which the user \ntypes the text ofthe description of the todo*/\n.descrAllEncloseDivClass{\n       \n    position: relative;\n    width: 95%;\n    height: fit-content;    \n\n    margin-bottom: 10px;\n    padding: 0px;\n\n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n                               }\n\n\n/*The div that contains the <p> for \nthe text \"Description\" in the todo*/\n.descrPencloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */\n                     }\n\n/*The <p> for the text \"Description\" in the todo*/\n.bottomViewTodoDescriptionTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n\n                               }\n    \n/*The <div> in which user types \nthe description of the todo*/\n.bottomViewTodoDescriptionDiv{\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n                         }\n\n\n\n/*NOW NOT NEEDED */\n/* The \"New heading\" button that appears in \nthe bottom-view project folder div */\n#newHeadButtDivBottViewID{\nposition: absolute;\ntop: 3px;\nright: 15px; \n                         }\n/*NOW NOT NEEDED */\n/* The \"New todo\" button that appears in \nthe bottom-view project folder div */\n#newTodoButtDivBottViewID{\n    position: absolute;\n    top: 3px;\n    right: 140px; \n                         }\n\n\n\n/* General dialog box to take in user input in \none input. Code sets the display value to \n\"block\" whenaim is to show the dialog box or\n\"none\" when the aim is to make the dialog box\ndisappear (ie when user hits \"Cancel\" or \nthe \"Submit\" button's callback has finished)*/\n.generalNameEntryBoxDiv{\nz-index: 5;\n\ndisplay: block;\n    \nposition: absolute;\n/* Code sets top and left attribs */\nwidth: 250px;\nheight: 250px;\n\nbackground-color: rgb(34, 132, 212);\nborder: chocolate 4px solid;\n\n                    }\n\n\n/* <p> for the general dialog box's \ntitle */\n.generalNameEntryBoxP{\n    position: absolute;\n    top : 15px;\n    left: 15px;\n    \n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 16px;   \n        \n                    }\n\n/* For the General dialog box's \ninput*/\n#generalNameEntryBoxInput{\n    position: absolute;\n    \n    top: 60px;\n    left: 15px;\n    \n    width: 150px;\n    height: 25px;\n    \n    background-color: rgb(211, 227, 240);\n    border: rgb(59, 29, 8) 1px solid;\n    \n                        }\n\n                       \n/* jQuery UI datepicker stuff follows */\n/* ----------  ----------  ----------  ----------  ----------  ---------- */\n\n/*date picker stuff:*/\n\n/*The <div> that contains \nthe <p> for text \"Pickdeadline \nand the input in \nwhich the jquery datepicker sits*/\n.datePicker1Class{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n\n                }\n    \n/*The <p> that reads \"Pick deadline\"*/\n.deadlineDatePickP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n}\n\n/* For the input. The user clcks in \nthis element to make the jQ date \npicker appear. This is where the date\ntext appears after users election from\nthe jQ date picker) */\n.datePickInputClass{\n    position: absolute;\n    top: 25px;\n    left: 2px;\n    background-color: rgb(212, 129, 154);\n    width: 90%;\n    height: fit-content;\n    margin-left: 0px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 18px;\n    color: rgb(112, 112, 112);\n                   }\n\n\n    /*One way of styling the text in the jquery datepicker.\n    However, it only styles the calendar:\n    .ui-widget { \n        font-family: Verdana,Arial,sans-serif; \n        font-size: 18px;\n        width: 260px;\n        background-color: floralwhite;\n               }\n    */\n    \n/* For all <a>s in the datepicker, which is \nwhat each date number is */ \n.ui-datepicker a {\n        color: #d35c5c;\n    }\n\n    \n    /* All styles that follow that beginwith \n    ui-datepicker are from the css file in jqueryUI\n    for the datepicker: */ \n\n\n    /*For the all-enclosing div of \n    the datepicker*/\n        .ui-datepicker {\n        width: 400px;\n        height: 330px;\n        padding: .2em .2em 0;\n        display: block;\n\n        /*Me:use of \"important!\" overrides the z-index that \n        jQ gives this div inline (a z-index of value 2)*/\n        z-index:16 !important;\n        border-radius: 10px;\n        border: #531010 7px outset;\n        background-color: rgb(235, 209, 241);\n        box-shadow: #070707 15px 15px 15px;\n                    }\n\n    .ui-datepicker .ui-datepicker-header {\n        position: relative;\n        padding: .2em 0;\n\n\n                                         }\n    .ui-datepicker .ui-datepicker-prev,\n    .ui-datepicker .ui-datepicker-next {\n        position: absolute;\n        top: 2px;\n        width: 1.8em;\n        height: 1.8em;\n        \n    }\n    .ui-datepicker .ui-datepicker-prev-hover,\n    .ui-datepicker .ui-datepicker-next-hover {\n        top: 1px;\n    }\n    \n    /*The text \"Prev\"*/\n    .ui-datepicker .ui-datepicker-prev {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        left: 2px;\n        top: -10px;\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n                                       }\n    /*The text \"Next\"*/\n    .ui-datepicker .ui-datepicker-next {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n        right: 30px;\n        top: -10px;\n                                        }\n    .ui-datepicker .ui-datepicker-prev-hover {\n        /**/\n        /*left: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-next-hover {\n        /*right: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-prev span,\n    .ui-datepicker .ui-datepicker-next span {\n        display: block;\n        position: absolute;\n        left: 50%;\n        margin-left: -8px;\n        top: 50%;\n        margin-top: -8px;\n    }\n    .ui-datepicker .ui-datepicker-title {\n        font-family: 'Open Sans-Italic';\n        font-size: 28px;\n        margin: 0 2.3em;\n        line-height: 1.8em;\n        text-align: center;\n        background-color: #e2c3c3;\n    }\n    .ui-datepicker .ui-datepicker-title select {\n        font-size: 1em;\n        margin: 1px 0;\n    }\n    .ui-datepicker select.ui-datepicker-month,\n    .ui-datepicker select.ui-datepicker-year {\n        width: 45%;\n                                             }\n\n/* Styles follow for the date-picker table*/\n    .ui-datepicker table {\n        width: 100%;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 26px;\n        border-collapse: collapse;\n        margin: 0 0 .4em;\n        \n    }\n    .ui-datepicker th {\n        padding: 0px;\n        /*padding: .7em .3em;*/\n        /*text-align: center;\n        font-weight: bold;*/ \n        border: 0;\n        color: #3a1053;\n    }\n    .ui-datepicker td {\n        border: 0;\n        padding: 0px;\n    }\n    .ui-datepicker td span,\n    .ui-datepicker td a {\n        display: block;\n        padding: .2em;\n        text-align: center;\n        text-decoration: none;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane {\n        background-image: none;\n        margin: .7em 0 0 0;\n        padding: 0 .2em;\n        border-left: 0;\n        border-right: 0;\n        border-bottom: 0;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button {\n        float: right;\n        margin: .5em .2em .4em;\n        cursor: pointer;\n        padding: .2em .6em .3em .6em;\n        width: auto;\n        overflow: visible;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {\n        float: left;\n    }\n    \n    /* with multiple calendars */\n    .ui-datepicker.ui-datepicker-multi {\n        width: auto;\n    }\n    .ui-datepicker-multi .ui-datepicker-group {\n        float: left;\n    }\n    .ui-datepicker-multi .ui-datepicker-group table {\n        width: 95%;\n        margin: 0 auto .4em;\n    }\n    .ui-datepicker-multi-2 .ui-datepicker-group {\n        width: 50%;\n    }\n    .ui-datepicker-multi-3 .ui-datepicker-group {\n        width: 33.3%;\n    }\n    .ui-datepicker-multi-4 .ui-datepicker-group {\n        width: 25%;\n    }\n    .ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {\n        border-left-width: 0;\n    }\n    .ui-datepicker-multi .ui-datepicker-buttonpane {\n        clear: left;\n    }\n    .ui-datepicker-row-break {\n        clear: both;\n        width: 100%;\n        font-size: 0;\n    }\n    \n    /* RTL support */\n    .ui-datepicker-rtl {\n        direction: rtl;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev {\n        right: 2px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next {\n        left: 2px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev:hover {\n        right: 1px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next:hover {\n        left: 1px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane {\n        clear: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button {\n        float: left;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current,\n    .ui-datepicker-rtl .ui-datepicker-group {\n        float: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {\n        border-right-width: 0;\n        border-left-width: 1px;\n    }\n    \n    /* Icons \n    Me: these are todo with the \"Prev\" and \"Next\" words.\n\n       */\n    .ui-datepicker .ui-icon {\n        display: block;\n        text-indent: 0px; /*-99999px;*/\n        overflow: hidden;\n        background-repeat: no-repeat;\n        left: .5em;\n        top: .3em;\n                            }\n\n/*The form in which user inputs \nthe name of a new project, new \nheading or new todo*/\n.newFormOuterDiv{\nposition: absolute;\ntop: 50px;\nleft: 400px;\n\nz-index: 25;\n\nwidth: 300px;\nheight: fit-content;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nbackground-color: rgb(172, 144, 216);\nbox-shadow: rgb(0, 0, 0) 18px 18px 18px;\nborder: 2px solid rgb(179, 105, 105);\nborder-radius: 5px;\n                }\n\n/*The container div for the form <p>\n(which reads \"Type new name\") */\n.newFormPcontainerDiv{\n    position:relative;\n    left: 10px;\n    top: -2px;\n    margin:0px;\n    padding:0px;\n    \n    width: 100%;\n    height: 36px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n/*The <p> \n(which reads \"Type new name\") */\n.newFormP{\n    margin:0px;\n    padding:0px;\n\n    position:relative;\n    width: 100%;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 26px;\n    color: rgb(207, 184, 184);\n    \n                         }\n\n\n\n/*The container div for the form input*/\n.newFormInputContainerDiv{\n    position:relative;\n    width: 100%;\n    height: 36px;\n    /*development:\n    border:rgb(0, 0, 0) 1px dotted; */\n                         }\n\n.newFormInput {\nposition: relative;\nleft: 10px;\n\nheight: 25px;\nwidth: 75%;\n              }\n\n\n.newFormLabel{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 16px;\nposition: relative;\nleft: 10px;\n             }\n\n/*The container div for the form buttons*/\n.newFormButtonsContainerDiv{\n    position:relative;\n    display: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n    width: 95%;\n    height: 46px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n             \n\n\n#newFormSubmitButtonID{\n\n}\n\n#newFormCancelButtonID{\n\n}\n\n\n/*-----------------------------------------------------------------------------------*/\n\n\n/*ANIMATION KEYFRAMES FOLLOW*/\n@keyframes grow1 { \n    0% { \n        transform: scaleY(0); \n        transform: scaleX(0); \n        opacity:0.3;\n        } \n\n    50% { \n        /*transform: scaleY(1.2); */\n        transform: scaleX(1.2); \n        opacity:0.5;\n        } \n\n    100% { \n        transform: scaleY(1); \n        transform: scaleX(1); \n        opacity:1.0;\n        } \n\n}\n\n@keyframes growMenu {\n    from {height: 0px;}\n    to {height: fit-content;}\n  }\n\n\n/*-------------------------------------*/\n\n\n/*-- Classes for the rightmost button\nbar and the buttons in it --*/\n.rightMostButtonBar{\n    position: absolute;\n    top: 346px;\n    left: 585px;\n    \n    width: 150px;\n    height: 40px;\n    \n    background-color: rgb(209, 184, 238);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    z-index: 10;\n    }\n\n        \n\n/*-- Classes for ddMenu that uses javascript \nto animate the movement of the ddMenu \n(produces moevement that is a bit clunky \nas you cannot use a timing curve)---*/\n\n/*\nNOTE: NO LONGER USED!\nThe div to which code appends \nthe ddmenus. This div has the copper border\nand is the middle of the three button bars\n\n.testMenuEnclDiv{\nposition: absolute;\ntop: 346px;\nleft: 400px;\n\nwidth: 150px;\nheight: 40px;\n\nbackground-color: rgb(209, 184, 238);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\nz-index: 10;\n}\n*/\n\n\n\n\n/*-NOTE: code makes the style attributes of the \nmenuAllEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n.menuDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nposition: relative;\n\n    width: 93%;\nheight: 30px;\n\nbackground-color: rgb(115, 29, 212);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\n\nz-index: 15;\n        }\n\n\n.menuItemsEnclDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n    top: -120px;\n\n    width: 95%;\n    \n    background-color: none;\n    /*\n    border: rgb(14, 13, 13) 3px dotted; *//* nearly black*/\n    border-radius: 5px;\n\n    z-index: 10;\n\n    overflow-y: hidden;\n\n    }\n    \n.menuItemDiv{\n        position: relative;\n                \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n\n        width: 90%;\n        height: 30px;\n        \n        background-color: rgb(115, 29, 212);\n        border: rgb(224, 134, 134) 3px outset;\n        border-radius: 5px;\n        }\n    \n.menuItemP{\nfont-size: 16px;\nline-height: 17px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\ncolor: #e5baba;\n\n          }\n\n/*-------------------------------------*/\n/*-- Classes for ddMenu that uses transform and transition ---*/\n/*-- Note that the div to which to append the menu is \nthe same as in the case of the ddMenu made using javascript,\nhence does not appear here ---*/\n\n/*-NOTE: code makes the style attributes of the \nallEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n/*For the div that includes text \"Menu\"\n(or whatever the title of the DDmenu is\n(in the case of this app, \"How to use \nthis app\"))*/\n    .menuDiv1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    min-width: 80px;\n    width: fit-content;\n    height: 30px;\n    \n    background-color: rgb(115, 29, 212);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    \n    padding-left: 5px;\n    padding-right: 5px;    \n\n    z-index: 15;\n            }\n\n.menuDiv1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n/*A div that encloses all of the \nddmenu items. This div slides up and down\nas the user clicks either the menu items \nor the menu div*/\n    .menuItemsEnclDiv1{\n        \n        \n        position: relative;\n        /*top value set in dynamically*/\n        left: 0px;\n        width: 98%;\n        \n        /* nearly black in dev:\n        border: rgb(14, 13, 13) 3px dotted;  */\n        border-radius: 5px;\n    \n        z-index: 10;\n        \n        overflow-x: hidden;\n            overflow-y: hidden;\n                      }\n\n/*A div for each menu item*/        \n    .menuItemDiv1{\n            position: relative;\n            left:0px;      \n            /* Code sets top dynamically */  \n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n\n            width: 91px;\n            /*width: fit-content;*/\n            height: 30px;\n            \n            background-color: rgb(115, 29, 212);\n            border: rgb(224, 134, 134) 3px outset;\n            border-radius: 5px;\n            /*offsetHeight is height + 2*border\n            or 36px\n            */\n            overflow-x: hidden;\n            overflow-y: hidden;\n\n            }\n.menuItemDiv1:active{   \n    box-shadow: #d6c14c 5px 0px 5px, #d6c14c  -5px 0px 5px; \n    /*\n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n    */\n                    } \n\n\n/* The <p> for the title of each menu item*/\n    .menuItemP1{\n    font-size: 16px;\n    line-height: 17px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    color: #f5efef;\n    \n              }\n              \n/*-----------------------------------------------------------------------*/\n\n/*-------------------------------------*/\n/* Styles for the mobile-phone menu  */\n/*-------------------------------------*/\n\n/* A div with which you can quickly visually \ncompare an element to get a rough  \nidea of the length of that element */\n.rulerDiv{\n\nposition: absolute;\ntop: 70px;\nright: 0px;\n\nwidth: 78px;\nheight: 40px;\n\nbackground-color: #8a1010;\n\npadding: 0px;\nmargin: 0px;\n\n        }\n\n.rulerDivPosR{\n    top: 80px;\n    right: 0px;\n             }\n\n.rulerDivPosL{\n    top: 150px;\n    left: 0px;\n             }\n\n\n\n.visTestDiv{\nbackground-color: #a2bbe0;\nborder: #58f50a 1px dotted;\n\nposition: absolute;\ntop: 100px;\nleft:100px;\n\nwidth: 260px; \nheight: 250px;\n\nz-index: 35;\n\n/* 'visibility' makes an element\ninvisible but keeps it in its  \noriginal position and maintains\nits size: */\n/* visibility: hidden;  */\n           }\n\n\n/*-- style for the div that \nencloses the main menu items \n--*/\n.menuEncloseDiv{\nposition: absolute;\n\n/*Code sets the left property\nby adding another class*/\n\n/*display: block;*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\n\nborder: #000000 1px dotted;\n/*\nborder-top: #000000 2px dotted;\nborder-bottom: #000000 2px dotted; */\n\n/*  */\nwidth:fit-content;\nheight: 50px;\n\nmargin: 0px;\npadding: 0px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n\n               }\n\n\n/*-- style for the div that \nencloses the \"More...\" menu item\n --*/\n \n.moreEncloseDiv{\n    position: absolute;\n    /*Code sets the right property\n    by adding another class*/\n    \n    \n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    \n    /*\n    border: #f20f0f 1px dotted;\n    border-top: #000000 2px dotted;\n    border-bottom: #000000 2px dotted; */\n    \n    border-left: #f20f0f 1px dotted;\n    border-right: #0f31f2 1px dotted;\n\n    margin: 0px;\n    padding: 0px;\n\n    /*  */\n    width:fit-content;\n    height: 50px;\n    \n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    visibility: visible;\n    \n                   }\n\n/*-- for the div that encloses the \nmain menu items (which has main class \nmenuEncloseDiv) --*/\n.mainItemsEnclDivLeftPos{\n    top: 0px;\n    left: 0px;\n    \n                        }\n                        \n/*-- for the div that encloses the \n\"More...\" menu item (which has main class \nmoreEncloseDiv) --*/\n.moreItemEnclDivRightPos{\n    top: 0px;\n    right: 0px;\n    /*Code sets width*/\n                        }\n\n\n/*-- for the div that encloses the \nmain menu items in the case of the \nhard-coded items--*/\n.HCmainItemsEnclDivLeftPos{\n    left: 0px;\n    top: 100px;\n                        }\n\n/*-- for the div that encloses the \n\"More...\" menu item in the case of \nthe hard-coded \nitems --*/\n.HCmoreItemEnclDivRightPos{\n    top: 120px;\n    right: 0px;\n\n    /*Code sets width*/\n                        }\n\n/*-- the div for a menu item \nand the div for the \"More...\"\nitem --*/\n.menuItemDiv{\n\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 40px;\n    \noverflow-x: hidden;\noverflow-y: hidden;\n\nbackground-color: #dcdbab;\nborder: #531010 1px solid;\n\nmargin-left: 5px;\nmargin-right: 5px;\n\npadding-left: 10px;\npadding-right: 10px;\n\n            }\n            \n/*-- the <p> for the text \nof the menu item --*/\n.menuItemP{\n/*-- DON\"T USE THE FOLLOWING AS IT MUCKS UP \noffsetWidth:\nfont-family: 'Open Sans-ExtraBold';   --*/\n/*I have tested the following font and it seems \nto work: */\nfont-family: 'Open Sans-Condensed-ExtraBold'; \nfont-size: 14px;\nline-height: 15px;\n/*\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: clip;\n*/\n\ncolor: #4a0a6f;\n\npadding: 0px;\nmargin: 0px;\n         }\n\n\n\n/*-- the <p> for the text \nof the \"More\" menu item --*/\n.menuMoreItemP{\n/*I have tested the following font and it seems \nto work:    */    \n    font-family: 'Open Sans-Italic';\n    font-size: 14px;\n    line-height: 16px;\n    color: #52089d;\n    /*NOTE letter-spacing has no effect on this font!!*/\n    \n             }\n\n\n/*-- DON't USE -- DON't USE -- DON't USE \nThis style contains the dodgy font!!\nThe <p> for the text \nof the \"More\" menu item --*/\n.dodgyFontP{\n    font-family: 'Open Sans-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n    color: #52089d;\n    \n             }\n\n/* -- \nThe div that drops down \nwhen the user clicks \"More...\" \n--*/ \n.remainderItemsDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nalign-items: flex-end;\n\nposition: absolute;\n/* Code sets top and right values*/\n\nbackground-color: none; \nborder-radius: 5px;\ntransform-origin: top left;\ntransition: transform 0.3s ease-in-out 0s;\n                  }\n\n.remainderItemsDivExpand{\n    \ntransform: scaleY(1);\nheight: fit-content;\nwidth: fit-content;\n                        }\n\n.remainderItemsDivShrink{\n    \n    transform: scaleY(0);\n\n    height: fit-content;\n    width: fit-content;\n                        }\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/* End styles for mobile-phone menu  */\n/*-------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/*TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF*/\n/*-------------------------------------*/\n\n.testDiv0{\n    display: block;\n    position: absolute;\n    left: 500px;\n    top: 200px;    \n\n   width: 200px;\n    height: 200px;\n    background-color: rosybrown;\n    border: royalblue 1px solid;\n\n    padding: 0px;\n    margin: 0px;\n\n    z-index: 10;\n\n        }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var named_references_1 = __webpack_require__(/*! ./named-references */ "./node_modules/html-entities/lib/named-references.js");
var numeric_unicode_map_1 = __webpack_require__(/*! ./numeric-unicode-map */ "./node_modules/html-entities/lib/numeric-unicode-map.js");
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), { all: named_references_1.namedReferences.html5 });
var encodeRegExps = {
    specialChars: /[<>'"&]/g,
    nonAscii: /(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
    nonAsciiPrintable: /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
    extensive: /(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g
};
var defaultEncodeOptions = {
    mode: 'specialChars',
    level: 'all',
    numeric: 'decimal'
};
/** Encodes all the necessary (specified by `level`) characters in the text */
function encode(text, _a) {
    var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? 'specialChars' : _c, _d = _b.numeric, numeric = _d === void 0 ? 'decimal' : _d, _e = _b.level, level = _e === void 0 ? 'all' : _e;
    if (!text) {
        return '';
    }
    var encodeRegExp = encodeRegExps[mode];
    var references = allNamedReferences[level].characters;
    var isHex = numeric === 'hexadecimal';
    encodeRegExp.lastIndex = 0;
    var _b = encodeRegExp.exec(text);
    var _c;
    if (_b) {
        _c = '';
        var _d = 0;
        do {
            if (_d !== _b.index) {
                _c += text.substring(_d, _b.index);
            }
            var _e = _b[0];
            var result_1 = references[_e];
            if (!result_1) {
                var code_1 = _e.length > 1 ? surrogate_pairs_1.getCodePoint(_e, 0) : _e.charCodeAt(0);
                result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
            }
            _c += result_1;
            _d = _b.index + _e.length;
        } while ((_b = encodeRegExp.exec(text)));
        if (_d !== text.length) {
            _c += text.substring(_d);
        }
    }
    else {
        _c =
            text;
    }
    return _c;
}
exports.encode = encode;
var defaultDecodeOptions = {
    scope: 'body',
    level: 'all'
};
var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
var baseDecodeRegExps = {
    xml: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.xml
    },
    html4: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html4
    },
    html5: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html5
    }
};
var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), { all: baseDecodeRegExps.html5 });
var fromCharCode = String.fromCharCode;
var outOfBoundsChar = fromCharCode(65533);
var defaultDecodeEntityOptions = {
    level: 'all'
};
/** Decodes a single entity */
function decodeEntity(entity, _a) {
    var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? 'all' : _b;
    if (!entity) {
        return '';
    }
    var _b = entity;
    var decodeEntityLastChar_1 = entity[entity.length - 1];
    if (false) {}
    else if (false) {}
    else {
        var decodeResultByReference_1 = allNamedReferences[level].entities[entity];
        if (decodeResultByReference_1) {
            _b = decodeResultByReference_1;
        }
        else if (entity[0] === '&' && entity[1] === '#') {
            var decodeSecondChar_1 = entity[2];
            var decodeCode_1 = decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X'
                ? parseInt(entity.substr(3), 16)
                : parseInt(entity.substr(2));
            _b =
                decodeCode_1 >= 0x10ffff
                    ? outOfBoundsChar
                    : decodeCode_1 > 65535
                        ? surrogate_pairs_1.fromCodePoint(decodeCode_1)
                        : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] || decodeCode_1);
        }
    }
    return _b;
}
exports.decodeEntity = decodeEntity;
/** Decodes all entities in the text */
function decode(text, _a) {
    var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a, decodeCode_1 = decodeSecondChar_1.level, level = decodeCode_1 === void 0 ? 'all' : decodeCode_1, _b = decodeSecondChar_1.scope, scope = _b === void 0 ? level === 'xml' ? 'strict' : 'body' : _b;
    if (!text) {
        return '';
    }
    var decodeRegExp = decodeRegExps[level][scope];
    var references = allNamedReferences[level].entities;
    var isAttribute = scope === 'attribute';
    var isStrict = scope === 'strict';
    decodeRegExp.lastIndex = 0;
    var replaceMatch_1 = decodeRegExp.exec(text);
    var replaceResult_1;
    if (replaceMatch_1) {
        replaceResult_1 = '';
        var replaceLastIndex_1 = 0;
        do {
            if (replaceLastIndex_1 !== replaceMatch_1.index) {
                replaceResult_1 += text.substring(replaceLastIndex_1, replaceMatch_1.index);
            }
            var replaceInput_1 = replaceMatch_1[0];
            var decodeResult_1 = replaceInput_1;
            var decodeEntityLastChar_2 = replaceInput_1[replaceInput_1.length - 1];
            if (isAttribute
                && decodeEntityLastChar_2 === '=') {
                decodeResult_1 = replaceInput_1;
            }
            else if (isStrict
                && decodeEntityLastChar_2 !== ';') {
                decodeResult_1 = replaceInput_1;
            }
            else {
                var decodeResultByReference_2 = references[replaceInput_1];
                if (decodeResultByReference_2) {
                    decodeResult_1 = decodeResultByReference_2;
                }
                else if (replaceInput_1[0] === '&' && replaceInput_1[1] === '#') {
                    var decodeSecondChar_2 = replaceInput_1[2];
                    var decodeCode_2 = decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X'
                        ? parseInt(replaceInput_1.substr(3), 16)
                        : parseInt(replaceInput_1.substr(2));
                    decodeResult_1 =
                        decodeCode_2 >= 0x10ffff
                            ? outOfBoundsChar
                            : decodeCode_2 > 65535
                                ? surrogate_pairs_1.fromCodePoint(decodeCode_2)
                                : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_2] || decodeCode_2);
                }
            }
            replaceResult_1 += decodeResult_1;
            replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
        } while ((replaceMatch_1 = decodeRegExp.exec(text)));
        if (replaceLastIndex_1 !== text.length) {
            replaceResult_1 += text.substring(replaceLastIndex_1);
        }
    }
    else {
        replaceResult_1 =
            text;
    }
    return replaceResult_1;
}
exports.decode = decode;


/***/ }),

/***/ "./node_modules/html-entities/lib/named-references.js":
/*!************************************************************!*\
  !*** ./node_modules/html-entities/lib/named-references.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g};exports.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}};

/***/ }),

/***/ "./node_modules/html-entities/lib/numeric-unicode-map.js":
/*!***************************************************************!*\
  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};

/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.fromCodePoint=String.fromCodePoint||function(astralCodePoint){return String.fromCharCode(Math.floor((astralCodePoint-65536)/1024)+55296,(astralCodePoint-65536)%1024+56320)};exports.getCodePoint=String.prototype.codePointAt?function(input,position){return input.codePointAt(position)}:function(input,position){return(input.charCodeAt(position)-55296)*1024+input.charCodeAt(position+1)-56320+65536};exports.highSurrogateFrom=55296;exports.highSurrogateTo=56319;

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);


if (true) {
  if (!_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var isNamedExport = !_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;
    var oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

    module.hot.accept(
      /*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css",
      __WEBPACK_OUTDATED_DEPENDENCIES__ => { /* harmony import */ _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css");
(function () {
        if (!isEqualLocals(oldLocals, isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals, isNamedExport)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

              update(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"]);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}



       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebSocketClient)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var WebSocketClient = /*#__PURE__*/function () {
  /**
   * @param {string} url
   */
  function WebSocketClient(url) {
    _classCallCheck(this, WebSocketClient);

    this.client = new WebSocket(url);

    this.client.onerror = function (error) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
    };
  }
  /**
   * @param {(...args: any[]) => void} f
   */


  _createClass(WebSocketClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.client.onopen = f;
    }
    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onClose",
    value: function onClose(f) {
      this.client.onclose = f;
    } // call f with the message string as the first argument

    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.client.onmessage = function (e) {
        f(e.data);
      };
    }
  }]);

  return WebSocketClient;
}();



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8070&pathname=%2Fws&logging=info&reconnect=10":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8070&pathname=%2Fws&logging=info&reconnect=10 ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=8070&pathname=%2Fws&logging=info&reconnect=10";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/stripAnsi.js */ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js");
/* harmony import */ var _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parseURL.js */ "./node_modules/webpack-dev-server/client/utils/parseURL.js");
/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
/* harmony import */ var _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/reloadApp.js */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
/* harmony import */ var _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/createSocketURL.js */ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js");
/* global __resourceQuery, __webpack_hash__ */
/// <reference types="webpack/module" />









/**
 * @typedef {Object} Options
 * @property {boolean} hot
 * @property {boolean} liveReload
 * @property {boolean} progress
 * @property {boolean | { warnings?: boolean, errors?: boolean, trustedTypesPolicyName?: string }} overlay
 * @property {string} [logging]
 * @property {number} [reconnect]
 */

/**
 * @typedef {Object} Status
 * @property {boolean} isUnloading
 * @property {string} currentHash
 * @property {string} [previousHash]
 */

/**
 * @type {Status}
 */

var status = {
  isUnloading: false,
  // TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement
  // eslint-disable-next-line camelcase
  currentHash:  true ? __webpack_require__.h() : 0
};
/** @type {Options} */

var options = {
  hot: false,
  liveReload: false,
  progress: false,
  overlay: false
};
var parsedResourceQuery = (0,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])(__resourceQuery);

if (parsedResourceQuery.hot === "true") {
  options.hot = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
}

if (parsedResourceQuery["live-reload"] === "true") {
  options.liveReload = true;
  _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
}

if (parsedResourceQuery.logging) {
  options.logging = parsedResourceQuery.logging;
}

if (typeof parsedResourceQuery.reconnect !== "undefined") {
  options.reconnect = Number(parsedResourceQuery.reconnect);
}
/**
 * @param {string} level
 */


function setAllLogLevel(level) {
  // This is needed because the HMR logger operate separately from dev server logger
  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.setLogLevel)(level);
}

if (options.logging) {
  setAllLogLevel(options.logging);
}

self.addEventListener("beforeunload", function () {
  status.isUnloading = true;
});
var onSocketMessage = {
  hot: function hot() {
    if (parsedResourceQuery.hot === "false") {
      return;
    }

    options.hot = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Hot Module Replacement enabled.");
  },
  liveReload: function liveReload() {
    if (parsedResourceQuery["live-reload"] === "false") {
      return;
    }

    options.liveReload = true;
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Live Reloading enabled.");
  },
  invalid: function invalid() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("App updated. Recompiling..."); // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Invalid");
  },

  /**
   * @param {string} hash
   */
  hash: function hash(_hash) {
    status.previousHash = status.currentHash;
    status.currentHash = _hash;
  },
  logging: setAllLogLevel,

  /**
   * @param {boolean} value
   */
  overlay: function overlay(value) {
    if (typeof document === "undefined") {
      return;
    }

    options.overlay = value;
  },

  /**
   * @param {number} value
   */
  reconnect: function reconnect(value) {
    if (parsedResourceQuery.reconnect === "false") {
      return;
    }

    options.reconnect = value;
  },

  /**
   * @param {boolean} value
   */
  progress: function progress(value) {
    options.progress = value;
  },

  /**
   * @param {{ pluginName?: string, percent: number, msg: string }} data
   */
  "progress-update": function progressUpdate(data) {
    if (options.progress) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Progress", data);
  },
  "still-ok": function stillOk() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Nothing changed.");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("StillOk");
  },
  ok: function ok() {
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Ok");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },
  // TODO: remove in v5 in favor of 'static-changed'

  /**
   * @param {string} file
   */
  "content-changed": function contentChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {string} file
   */
  "static-changed": function staticChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {Error[]} warnings
   * @param {any} params
   */
  warnings: function warnings(_warnings, params) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn("Warnings while compiling.");

    var printableWarnings = _warnings.map(function (error) {
      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("warning", error),
          header = _formatProblem.header,
          body = _formatProblem.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Warnings", printableWarnings);

    for (var i = 0; i < printableWarnings.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn(printableWarnings[i]);
    }

    var needShowOverlayForWarnings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;

    if (needShowOverlayForWarnings) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("warning", _warnings, trustedTypesPolicyName || null);
    }

    if (params && params.preventReloading) {
      return;
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },

  /**
   * @param {Error[]} errors
   */
  errors: function errors(_errors) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Errors while compiling. Reload prevented.");

    var printableErrors = _errors.map(function (error) {
      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("error", error),
          header = _formatProblem2.header,
          body = _formatProblem2.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Errors", printableErrors);

    for (var i = 0; i < printableErrors.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(printableErrors[i]);
    }

    var needShowOverlayForErrors = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;

    if (needShowOverlayForErrors) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("error", _errors, trustedTypesPolicyName || null);
    }
  },

  /**
   * @param {Error} error
   */
  error: function error(_error) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(_error);
  },
  close: function close() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Disconnected!");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Close");
  }
};
var socketURL = (0,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__["default"])(parsedResourceQuery);
(0,_socket_js__WEBPACK_IMPORTED_MODULE_3__["default"])(socketURL, onSocketMessage, options.reconnect);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client-src/modules/logger/SyncBailHookFake.js":
/*!*******************************************************!*\
  !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
  \*******************************************************/
/***/ (function(module) {


/**
 * Client stub for tapable SyncBailHook
 */

module.exports = function clientTapableSyncBailHook() {
  return {
    call: function call() {}
  };
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/Logger.js":
/*!****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/Logger.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var LogType = Object.freeze({
  error:
  /** @type {"error"} */
  "error",
  // message, c style arguments
  warn:
  /** @type {"warn"} */
  "warn",
  // message, c style arguments
  info:
  /** @type {"info"} */
  "info",
  // message, c style arguments
  log:
  /** @type {"log"} */
  "log",
  // message, c style arguments
  debug:
  /** @type {"debug"} */
  "debug",
  // message, c style arguments
  trace:
  /** @type {"trace"} */
  "trace",
  // no arguments
  group:
  /** @type {"group"} */
  "group",
  // [label]
  groupCollapsed:
  /** @type {"groupCollapsed"} */
  "groupCollapsed",
  // [label]
  groupEnd:
  /** @type {"groupEnd"} */
  "groupEnd",
  // [label]
  profile:
  /** @type {"profile"} */
  "profile",
  // [profileName]
  profileEnd:
  /** @type {"profileEnd"} */
  "profileEnd",
  // [profileName]
  time:
  /** @type {"time"} */
  "time",
  // name, time as [seconds, nanoseconds]
  clear:
  /** @type {"clear"} */
  "clear",
  // no arguments
  status:
  /** @type {"status"} */
  "status" // message, arguments

});
exports.LogType = LogType;
/** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */

var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger raw log method");
var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger times");
var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger aggregated times");

var WebpackLogger = /*#__PURE__*/function () {
  /**
   * @param {function(LogTypeEnum, any[]=): void} log log function
   * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger
   */
  function WebpackLogger(log, getChildLogger) {
    _classCallCheck(this, WebpackLogger);

    this[LOG_SYMBOL] = log;
    this.getChildLogger = getChildLogger;
  }

  _createClass(WebpackLogger, [{
    key: "error",
    value: function error() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this[LOG_SYMBOL](LogType.error, args);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this[LOG_SYMBOL](LogType.warn, args);
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this[LOG_SYMBOL](LogType.info, args);
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this[LOG_SYMBOL](LogType.log, args);
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this[LOG_SYMBOL](LogType.debug, args);
    }
  }, {
    key: "assert",
    value: function assert(assertion) {
      if (!assertion) {
        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          args[_key6 - 1] = arguments[_key6];
        }

        this[LOG_SYMBOL](LogType.error, args);
      }
    }
  }, {
    key: "trace",
    value: function trace() {
      this[LOG_SYMBOL](LogType.trace, ["Trace"]);
    }
  }, {
    key: "clear",
    value: function clear() {
      this[LOG_SYMBOL](LogType.clear);
    }
  }, {
    key: "status",
    value: function status() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      this[LOG_SYMBOL](LogType.status, args);
    }
  }, {
    key: "group",
    value: function group() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      this[LOG_SYMBOL](LogType.group, args);
    }
  }, {
    key: "groupCollapsed",
    value: function groupCollapsed() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      this[LOG_SYMBOL](LogType.groupCollapsed, args);
    }
  }, {
    key: "groupEnd",
    value: function groupEnd() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      this[LOG_SYMBOL](LogType.groupEnd, args);
    }
  }, {
    key: "profile",
    value: function profile(label) {
      this[LOG_SYMBOL](LogType.profile, [label]);
    }
  }, {
    key: "profileEnd",
    value: function profileEnd(label) {
      this[LOG_SYMBOL](LogType.profileEnd, [label]);
    }
  }, {
    key: "time",
    value: function time(label) {
      this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
      this[TIMERS_SYMBOL].set(label, process.hrtime());
    }
  }, {
    key: "timeLog",
    value: function timeLog(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
      }

      var time = process.hrtime(prev);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeEnd",
    value: function timeEnd(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeAggregate",
    value: function timeAggregate(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
      var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);

      if (current !== undefined) {
        if (time[1] + current[1] > 1e9) {
          time[0] += current[0] + 1;
          time[1] = time[1] - 1e9 + current[1];
        } else {
          time[0] += current[0];
          time[1] += current[1];
        }
      }

      this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
    }
  }, {
    key: "timeAggregateEnd",
    value: function timeAggregateEnd(label) {
      if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
      var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
      if (time === undefined) return;
      this[TIMERS_AGGREGATES_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }]);

  return WebpackLogger;
}();

exports.Logger = WebpackLogger;

/***/ }),

/***/ "./node_modules/webpack/lib/logging/createConsoleLogger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_10785__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var _require = __nested_webpack_require_10785__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    LogType = _require.LogType;
/** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */

/** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */

/** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */

/** @typedef {function(string): boolean} FilterFunction */

/**
 * @typedef {Object} LoggerConsole
 * @property {function(): void} clear
 * @property {function(): void} trace
 * @property {(...args: any[]) => void} info
 * @property {(...args: any[]) => void} log
 * @property {(...args: any[]) => void} warn
 * @property {(...args: any[]) => void} error
 * @property {(...args: any[]) => void=} debug
 * @property {(...args: any[]) => void=} group
 * @property {(...args: any[]) => void=} groupCollapsed
 * @property {(...args: any[]) => void=} groupEnd
 * @property {(...args: any[]) => void=} status
 * @property {(...args: any[]) => void=} profile
 * @property {(...args: any[]) => void=} profileEnd
 * @property {(...args: any[]) => void=} logTime
 */

/**
 * @typedef {Object} LoggerOptions
 * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
 * @property {FilterTypes|boolean} debug filter for debug logging
 * @property {LoggerConsole} console the console to log to
 */

/**
 * @param {FilterItemTypes} item an input item
 * @returns {FilterFunction} filter function
 */


var filterToFunction = function filterToFunction(item) {
  if (typeof item === "string") {
    var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
    /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
    return function (ident) {
      return regExp.test(ident);
    };
  }

  if (item && typeof item === "object" && typeof item.test === "function") {
    return function (ident) {
      return item.test(ident);
    };
  }

  if (typeof item === "function") {
    return item;
  }

  if (typeof item === "boolean") {
    return function () {
      return item;
    };
  }
};
/**
 * @enum {number}
 */


var LogLevel = {
  none: 6,
  false: 6,
  error: 5,
  warn: 4,
  info: 3,
  log: 2,
  true: 2,
  verbose: 1
};
/**
 * @param {LoggerOptions} options options object
 * @returns {function(string, LogTypeEnum, any[]): void} logging function
 */

module.exports = function (_ref) {
  var _ref$level = _ref.level,
      level = _ref$level === void 0 ? "info" : _ref$level,
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      console = _ref.console;
  var debugFilters = typeof debug === "boolean" ? [function () {
    return debug;
  }] :
  /** @type {FilterItemTypes[]} */
  [].concat(debug).map(filterToFunction);
  /** @type {number} */

  var loglevel = LogLevel["".concat(level)] || 0;
  /**
   * @param {string} name name of the logger
   * @param {LogTypeEnum} type type of the log entry
   * @param {any[]} args arguments of the log entry
   * @returns {void}
   */

  var logger = function logger(name, type, args) {
    var labeledArgs = function labeledArgs() {
      if (Array.isArray(args)) {
        if (args.length > 0 && typeof args[0] === "string") {
          return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
        } else {
          return ["[".concat(name, "]")].concat(_toConsumableArray(args));
        }
      } else {
        return [];
      }
    };

    var debug = debugFilters.some(function (f) {
      return f(name);
    });

    switch (type) {
      case LogType.debug:
        if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.debug === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.debug.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.log:
        if (!debug && loglevel > LogLevel.log) return;
        console.log.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.info:
        if (!debug && loglevel > LogLevel.info) return;
        console.info.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.warn:
        if (!debug && loglevel > LogLevel.warn) return;
        console.warn.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.error:
        if (!debug && loglevel > LogLevel.error) return;
        console.error.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.trace:
        if (!debug) return;
        console.trace();
        break;

      case LogType.groupCollapsed:
        if (!debug && loglevel > LogLevel.log) return;

        if (!debug && loglevel > LogLevel.verbose) {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          if (typeof console.groupCollapsed === "function") {
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
          } else {
            console.log.apply(console, _toConsumableArray(labeledArgs()));
          }

          break;
        }

      // falls through

      case LogType.group:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.group === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.group.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.groupEnd:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.groupEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.groupEnd();
        }

        break;

      case LogType.time:
        {
          if (!debug && loglevel > LogLevel.log) return;
          var ms = args[1] * 1000 + args[2] / 1000000;
          var msg = "[".concat(name, "] ").concat(args[0], ": ").concat(ms, " ms");

          if (typeof console.logTime === "function") {
            console.logTime(msg);
          } else {
            console.log(msg);
          }

          break;
        }

      case LogType.profile:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profile === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profile.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.profileEnd:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profileEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.clear:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.clear === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.clear();
        }

        break;

      case LogType.status:
        if (!debug && loglevel > LogLevel.info) return;

        if (typeof console.status === "function") {
          if (args.length === 0) {
            console.status();
          } else {
            console.status.apply(console, _toConsumableArray(labeledArgs()));
          }
        } else {
          if (args.length !== 0) {
            console.info.apply(console, _toConsumableArray(labeledArgs()));
          }
        }

        break;

      default:
        throw new Error("Unexpected LogType ".concat(type));
    }
  };

  return logger;
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/runtime.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_20872__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var SyncBailHook = __nested_webpack_require_20872__(/*! tapable/lib/SyncBailHook */ "./client-src/modules/logger/SyncBailHookFake.js");

var _require = __nested_webpack_require_20872__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    Logger = _require.Logger;

var createConsoleLogger = __nested_webpack_require_20872__(/*! ./createConsoleLogger */ "./node_modules/webpack/lib/logging/createConsoleLogger.js");
/** @type {createConsoleLogger.LoggerOptions} */


var currentDefaultLoggerOptions = {
  level: "info",
  debug: false,
  console: console
};
var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
/**
 * @param {string} name name of the logger
 * @returns {Logger} a logger
 */

exports.getLogger = function (name) {
  return new Logger(function (type, args) {
    if (exports.hooks.log.call(name, type, args) === undefined) {
      currentDefaultLogger(name, type, args);
    }
  }, function (childName) {
    return exports.getLogger("".concat(name, "/").concat(childName));
  });
};
/**
 * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
 * @returns {void}
 */


exports.configureDefaultLogger = function (options) {
  _extends(currentDefaultLoggerOptions, options);

  currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
};

exports.hooks = {
  log: new SyncBailHook(["origin", "type", "args"])
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_23009__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_23009__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_23009__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_23009__.o(definition, key) && !__nested_webpack_require_23009__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_23009__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_23009__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!********************************************!*\
  !*** ./client-src/modules/logger/index.js ***!
  \********************************************/
__nested_webpack_require_23009__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_23009__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* reexport default export from named module */ webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__; }
/* harmony export */ });
/* harmony import */ var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_23009__(/*! webpack/lib/logging/runtime.js */ "./node_modules/webpack/lib/logging/runtime.js");

}();
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatProblem": () => (/* binding */ formatProblem),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js");
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(html_entities__WEBPACK_IMPORTED_MODULE_1__);
// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).


var colors = {
  reset: ["transparent", "transparent"],
  black: "181818",
  red: "E36049",
  green: "B3CB74",
  yellow: "FFD080",
  blue: "7CAFC2",
  magenta: "7FACCA",
  cyan: "C3C2EF",
  lightgrey: "EBE7E3",
  darkgrey: "6D7891"
};
/** @type {HTMLIFrameElement | null | undefined} */

var iframeContainerElement;
/** @type {HTMLDivElement | null | undefined} */

var containerElement;
/** @type {Array<(element: HTMLDivElement) => void>} */

var onLoadQueue = [];
/** @type {TrustedTypePolicy | undefined} */

var overlayTrustedTypesPolicy;
ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);
/**
 * @param {string | null} trustedTypesPolicyName
 */

function createContainer(trustedTypesPolicyName) {
  // Enable Trusted Types if they are available in the current browser.
  if (window.trustedTypes) {
    overlayTrustedTypesPolicy = window.trustedTypes.createPolicy(trustedTypesPolicyName || "webpack-dev-server#overlay", {
      createHTML: function createHTML(value) {
        return value;
      }
    });
  }

  iframeContainerElement = document.createElement("iframe");
  iframeContainerElement.id = "webpack-dev-server-client-overlay";
  iframeContainerElement.src = "about:blank";
  iframeContainerElement.style.position = "fixed";
  iframeContainerElement.style.left = 0;
  iframeContainerElement.style.top = 0;
  iframeContainerElement.style.right = 0;
  iframeContainerElement.style.bottom = 0;
  iframeContainerElement.style.width = "100vw";
  iframeContainerElement.style.height = "100vh";
  iframeContainerElement.style.border = "none";
  iframeContainerElement.style.zIndex = 9999999999;

  iframeContainerElement.onload = function () {
    containerElement =
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.createElement("div");
    containerElement.id = "webpack-dev-server-client-overlay-div";
    containerElement.style.position = "fixed";
    containerElement.style.boxSizing = "border-box";
    containerElement.style.left = 0;
    containerElement.style.top = 0;
    containerElement.style.right = 0;
    containerElement.style.bottom = 0;
    containerElement.style.width = "100vw";
    containerElement.style.height = "100vh";
    containerElement.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
    containerElement.style.color = "#E8E8E8";
    containerElement.style.fontFamily = "Menlo, Consolas, monospace";
    containerElement.style.fontSize = "large";
    containerElement.style.padding = "2rem";
    containerElement.style.lineHeight = "1.2";
    containerElement.style.whiteSpace = "pre-wrap";
    containerElement.style.overflow = "auto";
    var headerElement = document.createElement("span");
    headerElement.innerText = "Compiled with problems:";
    var closeButtonElement = document.createElement("button");
    closeButtonElement.innerText = "X";
    closeButtonElement.style.background = "transparent";
    closeButtonElement.style.border = "none";
    closeButtonElement.style.fontSize = "20px";
    closeButtonElement.style.fontWeight = "bold";
    closeButtonElement.style.color = "white";
    closeButtonElement.style.cursor = "pointer";
    closeButtonElement.style.cssFloat = "right"; // @ts-ignore

    closeButtonElement.style.styleFloat = "right";
    closeButtonElement.addEventListener("click", function () {
      hide();
    });
    containerElement.appendChild(headerElement);
    containerElement.appendChild(closeButtonElement);
    containerElement.appendChild(document.createElement("br"));
    containerElement.appendChild(document.createElement("br"));
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.body.appendChild(containerElement);
    onLoadQueue.forEach(function (onLoad) {
      onLoad(
      /** @type {HTMLDivElement} */
      containerElement);
    });
    onLoadQueue = [];
    /** @type {HTMLIFrameElement} */

    iframeContainerElement.onload = null;
  };

  document.body.appendChild(iframeContainerElement);
}
/**
 * @param {(element: HTMLDivElement) => void} callback
 * @param {string | null} trustedTypesPolicyName
 */


function ensureOverlayExists(callback, trustedTypesPolicyName) {
  if (containerElement) {
    // Everything is ready, call the callback right away.
    callback(containerElement);
    return;
  }

  onLoadQueue.push(callback);

  if (iframeContainerElement) {
    return;
  }

  createContainer(trustedTypesPolicyName);
} // Successful compilation.


function hide() {
  if (!iframeContainerElement) {
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(iframeContainerElement);
  iframeContainerElement = null;
  containerElement = null;
}
/**
 * @param {string} type
 * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string }} item
 * @returns {{ header: string, body: string }}
 */


function formatProblem(type, item) {
  var header = type === "warning" ? "WARNING" : "ERROR";
  var body = "";

  if (typeof item === "string") {
    body += item;
  } else {
    var file = item.file || ""; // eslint-disable-next-line no-nested-ternary

    var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
    var loc = item.loc;
    header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
    body += item.message || "";
  }

  return {
    header: header,
    body: body
  };
} // Compilation with errors (e.g. syntax error or missing modules).

/**
 * @param {string} type
 * @param {Array<string  | { file?: string, moduleName?: string, loc?: string, message?: string }>} messages
 * @param {string | null} trustedTypesPolicyName
 */


function show(type, messages, trustedTypesPolicyName) {
  ensureOverlayExists(function () {
    messages.forEach(function (message) {
      var entryElement = document.createElement("div");
      var typeElement = document.createElement("span");

      var _formatProblem = formatProblem(type, message),
          header = _formatProblem.header,
          body = _formatProblem.body;

      typeElement.innerText = header;
      typeElement.style.color = "#".concat(colors.red); // Make it look similar to our terminal.

      var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()((0,html_entities__WEBPACK_IMPORTED_MODULE_1__.encode)(body));
      var messageTextNode = document.createElement("div");
      messageTextNode.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(text) : text;
      entryElement.appendChild(typeElement);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(messageTextNode);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      /** @type {HTMLDivElement} */

      containerElement.appendChild(entryElement);
    });
  }, trustedTypesPolicyName);
}



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "client": () => (/* binding */ client),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* global __webpack_dev_server_client__ */

 // this WebsocketClient is here as a default fallback, in case the client is not injected

/* eslint-disable camelcase */

var Client = // eslint-disable-next-line no-nested-ternary
typeof __webpack_dev_server_client__ !== "undefined" ? typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
/* eslint-enable camelcase */

var retries = 0;
var maxRetries = 10; // Initialized client is exported so external consumers can utilize the same instance
// It is mutable to enforce singleton
// eslint-disable-next-line import/no-mutable-exports

var client = null;
/**
 * @param {string} url
 * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers
 * @param {number} [reconnect]
 */

var socket = function initSocket(url, handlers, reconnect) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;

    if (typeof reconnect !== "undefined") {
      maxRetries = reconnect;
    }
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries < maxRetries) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
      setTimeout(function () {
        socket(url, handlers, reconnect);
      }, retryInMs);
    }
  });
  client.onMessage(
  /**
   * @param {any} data
   */
  function (data) {
    var message = JSON.parse(data);

    if (handlers[message.type]) {
      handlers[message.type](message.data, message.params);
    }
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL
 * @returns {string}
 */
function format(objURL) {
  var protocol = objURL.protocol || "";

  if (protocol && protocol.substr(-1) !== ":") {
    protocol += ":";
  }

  var auth = objURL.auth || "";

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }

  var host = "";

  if (objURL.hostname) {
    host = auth + (objURL.hostname.indexOf(":") === -1 ? objURL.hostname : "[".concat(objURL.hostname, "]"));

    if (objURL.port) {
      host += ":".concat(objURL.port);
    }
  }

  var pathname = objURL.pathname || "";

  if (objURL.slashes) {
    host = "//".concat(host || "");

    if (pathname && pathname.charAt(0) !== "/") {
      pathname = "/".concat(pathname);
    }
  } else if (!host) {
    host = "";
  }

  var search = objURL.search || "";

  if (search && search.charAt(0) !== "?") {
    search = "?".concat(search);
  }

  var hash = objURL.hash || "";

  if (hash && hash.charAt(0) !== "#") {
    hash = "#".concat(hash);
  }

  pathname = pathname.replace(/[?#]/g,
  /**
   * @param {string} match
   * @returns {string}
   */
  function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}
/**
 * @param {URL & { fromCurrentScript?: boolean }} parsedURL
 * @returns {string}
 */


function createSocketURL(parsedURL) {
  var hostname = parsedURL.hostname; // Node.js module parses it as `::`
  // `new URL(urlString, [baseURLString])` parses it as '[::]'

  var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]"; // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
    hostname = self.location.hostname;
  }

  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.

  if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
    socketURLProtocol = self.location.protocol;
  }

  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
  var socketURLAuth = ""; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
  // Parse authentication credentials in case we need them

  if (parsedURL.username) {
    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,
    // we only include password if the username is not empty.

    if (parsedURL.password) {
      // Result: <username>:<password>
      socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
    }
  } // In case the host is a raw IPv6 address, it can be enclosed in
  // the brackets as the brackets are needed in the final URL string.
  // Need to remove those as url.format blindly adds its own set of brackets
  // if the host string contains colons. That would lead to non-working
  // double brackets (e.g. [[::]]) host
  //
  // All of these web socket url params are optionally passed in through resourceQuery,
  // so we need to fall back to the default if they are not provided


  var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
  var socketURLPort = parsedURL.port;

  if (!socketURLPort || socketURLPort === "0") {
    socketURLPort = self.location.port;
  } // If path is provided it'll be passed in via the resourceQuery as a
  // query param so it has to be parsed out of the querystring in order for the
  // client to open the socket to the correct location.


  var socketURLPathname = "/ws";

  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
    socketURLPathname = parsedURL.pathname;
  }

  return format({
    protocol: socketURLProtocol,
    auth: socketURLAuth,
    hostname: socketURLHostname,
    port: socketURLPort,
    pathname: socketURLPathname,
    slashes: true
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createSocketURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @returns {string}
 */
function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute("src");
  } // Fallback to getting all scripts running in the document.


  var scriptElements = document.scripts || [];
  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
    return element.getAttribute("src");
  });

  if (scriptElementsWithSrc.length > 0) {
    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
    return currentScript.getAttribute("src");
  } // Fail as there was no script to use.


  throw new Error("[webpack-dev-server] Failed to get current script source.");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getCurrentScriptSource);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "setLogLevel": () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);

var name = "webpack-dev-server"; // default level is set on the client side, so it does not need
// to be set by the CLI or API

var defaultLevel = "info"; // options new options, merge with old options

/**
 * @param {false | true | "none" | "error" | "warn" | "info" | "log" | "verbose"} level
 * @returns {void}
 */

function setLogLevel(level) {
  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
    level: level
  });
}

setLogLevel(defaultLevel);
var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/parseURL.js":
/*!******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCurrentScriptSource.js */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

/**
 * @param {string} resourceQuery
 * @returns {{ [key: string]: string | boolean }}
 */

function parseURL(resourceQuery) {
  /** @type {{ [key: string]: string }} */
  var options = {};

  if (typeof resourceQuery === "string" && resourceQuery !== "") {
    var searchParams = resourceQuery.slice(1).split("&");

    for (var i = 0; i < searchParams.length; i++) {
      var pair = searchParams[i].split("=");
      options[pair[0]] = decodeURIComponent(pair[1]);
    }
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptSource = (0,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
    var scriptSourceURL;

    try {
      // The placeholder `baseURL` with `window.location.href`,
      // is to allow parsing of path-relative or protocol-relative URLs,
      // and will have no effect if `scriptSource` is a fully valid URL.
      scriptSourceURL = new URL(scriptSource, self.location.href);
    } catch (error) {// URL parsing failed, do nothing.
      // We will still proceed to see if we can recover using `resourceQuery`
    }

    if (scriptSourceURL) {
      options = scriptSourceURL;
      options.fromCurrentScript = true;
    }
  }

  return options;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");


/** @typedef {import("../index").Options} Options
/** @typedef {import("../index").Status} Status

/**
 * @param {Options} options
 * @param {Status} status
 */

function reloadApp(_ref, status) {
  var hot = _ref.hot,
      liveReload = _ref.liveReload;

  if (status.isUnloading) {
    return;
  }

  var currentHash = status.currentHash,
      previousHash = status.previousHash;
  var isInitial = currentHash.indexOf(
  /** @type {string} */
  previousHash) >= 0;

  if (isInitial) {
    return;
  }
  /**
   * @param {Window} rootWindow
   * @param {number} intervalId
   */


  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App updated. Reloading...");
    rootWindow.location.reload();
  }

  var search = self.location.search.toLowerCase();
  var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
  var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;

  if (hot && allowToHot) {
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App hot update...");
    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default().emit("webpackHotUpdate", status.currentHash);

    if (typeof self !== "undefined" && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(status.currentHash), "*");
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload && allowToLiveReload) {
    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== "about:") {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;

        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reloadApp);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* global __resourceQuery WorkerGlobalScope */
// Send messages to the outside, so plugins can consume it.

/**
 * @param {string} type
 * @param {any} [data]
 */
function sendMsg(type, data) {
  if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, "*");
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/stripAnsi.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"), "g");
/**
 *
 * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.
 * Adapted from code originally released by Sindre Sorhus
 * Licensed the MIT License
 *
 * @param {string} string
 * @return {string}
 */

function stripAnsi(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
  }

  return string.replace(ansiRegex, "");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stripAnsi);

/***/ }),

/***/ "./node_modules/webpack/hot/dev-server.js":
/*!************************************************!*\
  !*** ./node_modules/webpack/hot/dev-server.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/* globals __webpack_hash__ */
if (true) {
	var lastHash;
	var upToDate = function upToDate() {
		return lastHash.indexOf(__webpack_require__.h()) >= 0;
	};
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
	var check = function check() {
		module.hot
			.check(true)
			.then(function (updatedModules) {
				if (!updatedModules) {
					log("warning", "[HMR] Cannot find update. Need to do a full reload!");
					log(
						"warning",
						"[HMR] (Probably because of restarting the webpack-dev-server)"
					);
					window.location.reload();
					return;
				}

				if (!upToDate()) {
					check();
				}

				__webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);

				if (upToDate()) {
					log("info", "[HMR] App is up to date.");
				}
			})
			.catch(function (err) {
				var status = module.hot.status();
				if (["abort", "fail"].indexOf(status) >= 0) {
					log(
						"warning",
						"[HMR] Cannot apply update. Need to do a full reload!"
					);
					log("warning", "[HMR] " + log.formatError(err));
					window.location.reload();
				} else {
					log("warning", "[HMR] Update failed: " + log.formatError(err));
				}
			});
	};
	var hotEmitter = __webpack_require__(/*! ./emitter */ "./node_modules/webpack/hot/emitter.js");
	hotEmitter.on("webpackHotUpdate", function (currentHash) {
		lastHash = currentHash;
		if (!upToDate() && module.hot.status() === "idle") {
			log("info", "[HMR] Checking for updates on the server...");
			check();
		}
	});
	log("info", "[HMR] Waiting for update signal from WDS...");
} else {}


/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/*!******************************************************!*\
  !*** ./node_modules/webpack/hot/log-apply-result.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function (updatedModules, renewedModules) {
	var unacceptedModules = updatedModules.filter(function (moduleId) {
		return renewedModules && renewedModules.indexOf(moduleId) < 0;
	});
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");

	if (unacceptedModules.length > 0) {
		log(
			"warning",
			"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"
		);
		unacceptedModules.forEach(function (moduleId) {
			log("warning", "[HMR]  - " + moduleId);
		});
	}

	if (!renewedModules || renewedModules.length === 0) {
		log("info", "[HMR] Nothing hot updated.");
	} else {
		log("info", "[HMR] Updated modules:");
		renewedModules.forEach(function (moduleId) {
			if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
				var parts = moduleId.split("!");
				log.groupCollapsed("info", "[HMR]  - " + parts.pop());
				log("info", "[HMR]  - " + moduleId);
				log.groupEnd("info");
			} else {
				log("info", "[HMR]  - " + moduleId);
			}
		});
		var numberIds = renewedModules.every(function (moduleId) {
			return typeof moduleId === "number";
		});
		if (numberIds)
			log(
				"info",
				'[HMR] Consider using the optimization.moduleIds: "named" for module names.'
			);
	}
};


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function (level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function (level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
	logLevel = level;
};

module.exports.formatError = function (err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf":
/*!***************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "6e27168fc8a5a200a026.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf":
/*!********************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "312244ca5ea57843f749.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf":
/*!*****************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "79c81eb67c8c53b33a29.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf":
/*!*******************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "d7261533b9a545ddc769.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf":
/*!****************************************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "cde0ad8b7a7f090b853b.ttf";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 		} catch(e) {
/******/ 			module.error = e;
/******/ 			throw e;
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("5e7f4df2265e0a57ec4e")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "lotterynumbergenerator:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results);
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							},
/******/ 							[])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								} else {
/******/ 									return setStatus("ready").then(function () {
/******/ 										return updatedModules;
/******/ 									});
/******/ 								}
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdatelotterynumbergenerator"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8070&pathname=%2Fws&logging=info&reconnect=10");
/******/ 	__webpack_require__("./node_modules/webpack/hot/dev-server.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,